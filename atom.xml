<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>郭晋宇的技术博客</title>
  
  <subtitle>0.2+0.4=0.6000000000000001</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://guojinyu.com/"/>
  <updated>2018-06-03T16:30:13.672Z</updated>
  <id>http://guojinyu.com/</id>
  
  <author>
    <name>郭晋宇</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>你真的懂wait、notify和notifyAll吗</title>
    <link href="http://guojinyu.com/2018/06/03/%E4%BD%A0%E7%9C%9F%E7%9A%84%E6%87%82wait%E3%80%81notify%E5%92%8CnotifyAll%E5%90%97/"/>
    <id>http://guojinyu.com/2018/06/03/你真的懂wait、notify和notifyAll吗/</id>
    <published>2018-06-02T16:24:00.000Z</published>
    <updated>2018-06-03T16:30:13.672Z</updated>
    
    <content type="html"><![CDATA[<p>生产者消费者模型是我们学习多线程知识的一个经典案例，一个典型的生产者消费者模型如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (mBuf.isFull()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mBuf.add();</span><br><span class="line">        notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (mBuf.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mBuf.remove();</span><br><span class="line">        notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这段代码很容易引申出来两个问题：<strong>一个是wait()方法外面为什么是while循环而不是if判断，另一个是结尾处的为什么要用notifyAll()方法，用notify()行吗。</strong></p><p>很多人在回答第二个问题的时候会想当然的说notify()是唤醒一个线程，notifyAll()是唤醒全部线程，但是唤醒然后呢，不管是notify()还是notifyAll()，最终拿到锁的只会有一个线程，那它们到底有什么区别呢？</p><p>其实这是一个对象内部锁的调度问题，要回答这两个问题，首先我们要明白java中对象锁的模型，JVM会为一个使用内部锁（synchronized）的对象维护两个集合，<strong>Entry Set</strong>和<strong>Wait Set</strong>，也有人翻译为锁池和等待池，意思基本一致。</p><p>对于Entry Set：如果线程A已经持有了对象锁，此时如果有其他线程也想获得该对象锁的话，它只能进入Entry Set，并且处于线程的BLOCKED状态。</p><p>对于Wait Set：如果线程A调用了wait()方法，那么线程A会释放该对象的锁，进入到Wait Set，并且处于线程的WAITING状态。</p><p>还有需要注意的是，某个线程B想要获得对象锁，一般情况下有两个先决条件，一是对象锁已经被释放了（如曾经持有锁的前任线程A执行完了synchronized代码块或者调用了wait()方法等等），二是线程B已处于RUNNABLE状态。</p><p>那么这两类集合中的线程都是在什么条件下可以转变为RUNNABLE呢？</p><p>对于Entry Set中的线程，当对象锁被释放的时候，JVM会唤醒处于Entry Set中的某一个线程，这个线程的状态就从BLOCKED转变为RUNNABLE。</p><p>对于Wait Set中的线程，当对象的notify()方法被调用时，JVM会唤醒处于Wait Set中的某一个线程，这个线程的状态就从WAITING转变为RUNNABLE；或者当notifyAll()方法被调用时，Wait Set中的全部线程会转变为RUNNABLE状态，Wait Set中被唤醒的线程会被转移到Entry Set中。</p><p>然后，每当对象的锁被释放后，那些所有处于RUNNABLE状态的线程会共同去竞争获取对象的锁，最终会有一个线程（具体哪一个取决于JVM实现，队列里的第一个？随机的一个？）真正获取到对象的锁，而其他竞争失败的线程继续在Entry Set中等待下一次机会。</p><p>有了这些知识点作为基础，上述的两个问题就能解释的清了。</p><p>首先来看第一个问题，我们在调用wait()方法的时候，心里想的肯定是因为当前方法不满足我们指定的条件，因此执行这个方法的线程需要等待直到其他线程改变了这个条件并且做出了通知。那么为什么要把wait()方法放在循环而不是if判断里呢，其实答案显而易见，因为wait()的线程永远不能确定其他线程会在什么状态下notify()，所以必须在被唤醒、抢占到锁并且从wait()方法退出的时候再次进行指定条件的判断，以决定是满足条件往下执行呢还是不满足条件再次wait()呢。</p><p>就像在本例中，如果只有一个生产者线程，一个消费者线程，那其实是可以用if代替while的，因为线程调度的行为是开发者可以预测的，生产者线程只有可能被消费者线程唤醒，反之亦然，因此被唤醒时条件始终满足，程序不会出错。但是这种情况只是多线程情况下极为简单的一种，更普遍的是多个线程生产，多个线程消费，那么就极有可能出现唤醒生产者的是另一个生产者或者唤醒消费者的是另一个消费者，这样的情况下用if就必然会现类似过度生产或者过度消费的情况了，典型如IndexOutOfBoundsException的异常。所以所有的java书籍都会建议开发者<strong>永远都要把wait()放到循环语句里面</strong>。</p><p>然后来看第二个问题，既然notify()和notifyAll()最终的结果都是只有一个线程能拿到锁，那唤醒一个和唤醒多个有什么区别呢？</p><p>耐心看下面这个两个生产者两个消费者的场景，如果我们代码中使用了notify()而非notifyAll()，假设消费者线程1拿到了锁，判断buffer为空，那么wait()，释放锁；然后消费者2拿到了锁，同样buffer为空，wait(),也就是说此时Wait Set中有两个线程；然后生产者1拿到锁，生产，buffer满，notify()了,那么可能消费者1被唤醒了，但是此时还有另一个线程生产者2在Entry Set中盼望着锁，并且最终抢占到了锁，但因为此时buffer是满的，因此它要wait()；然后消费者1拿到了锁，消费，notify()；这时就有问题了，此时生产者2和消费者2都在Wait Set中，buffer为空，如果唤醒生产者2，没毛病；但如果唤醒了消费者2，因为buffer为空，它会再次wait()，这就尴尬了，万一生产者1已经退出不再生产了，没有其他线程在竞争锁了，只有生产者2和消费者2在Wait Set中互相等待，那传说中的死锁就发生了。</p><p>但如果你把上述例子中的notify()换成notifyAll()，这样的情况就不会再出现了，因为每次notifyAll()都会使其他等待的线程从Wait Set进入Entry Set，从而有机会获得锁。</p><p>其实说了这么多，一句话解释就是<strong>之所以我们应该尽量使用notifyAll()的原因就是，notify()非常容易导致死锁</strong>。当然notifyAll并不一定都是优点，毕竟一次性将Wait Set中的线程都唤醒是一笔不菲的开销，如果你能handle你的线程调度，那么使用notify()也是有好处的。</p><p>最后我把完整的测试代码放出来，供大家参考：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Something</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Buffer mBuf = <span class="keyword">new</span> Buffer();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (mBuf.isFull()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            mBuf.add();</span><br><span class="line">            notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (mBuf.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            mBuf.remove();</span><br><span class="line">            notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Buffer</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_CAPACITY = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">private</span> List innerList = <span class="keyword">new</span> ArrayList&lt;&gt;(MAX_CAPACITY);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (isFull()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                innerList.add(<span class="keyword">new</span> Object());</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().toString() + <span class="string">" add"</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                innerList.remove(MAX_CAPACITY - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().toString() + <span class="string">" remove"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> innerList.isEmpty();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> innerList.size() == MAX_CAPACITY;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Something sth = <span class="keyword">new</span> Something();</span><br><span class="line">        Runnable runProduce = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="keyword">int</span> count = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span> (count-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    sth.produce();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Runnable runConsume = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="keyword">int</span> count = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span> (count-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    sth.consume();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(runConsume).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(runProduce).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>上面的栗子是正确的使用方式，输出的结果如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Thread[Thread-2,5,main] add</span><br><span class="line">Thread[Thread-1,5,main] remove</span><br><span class="line">Thread[Thread-3,5,main] add</span><br><span class="line">Thread[Thread-0,5,main] remove</span><br><span class="line">Thread[Thread-3,5,main] add</span><br><span class="line">Thread[Thread-0,5,main] remove</span><br><span class="line">Thread[Thread-2,5,main] add</span><br><span class="line">Thread[Thread-1,5,main] remove</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><ul><li>如果把while改成if，结果如下，程序可能产生运行时异常：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Thread[Thread-2,5,main] add</span><br><span class="line">Thread[Thread-1,5,main] remove</span><br><span class="line">Thread[Thread-3,5,main] add</span><br><span class="line">Thread[Thread-1,5,main] remove</span><br><span class="line">Thread[Thread-3,5,main] add</span><br><span class="line">Thread[Thread-1,5,main] remove</span><br><span class="line">Exception in thread &quot;Thread-0&quot; Exception in thread &quot;Thread-2&quot; java.lang.IndexOutOfBoundsException</span><br><span class="line">at Something$Buffer.add(Something.java:42)</span><br><span class="line">at Something.produce(Something.java:16)</span><br><span class="line">at Something$1.run(Something.java:76)</span><br><span class="line">at java.lang.Thread.run(Thread.java:748)</span><br><span class="line">java.lang.IndexOutOfBoundsException</span><br><span class="line">at Something$Buffer.remove(Something.java:52)</span><br><span class="line">at Something.consume(Something.java:30)</span><br><span class="line">at Something$2.run(Something.java:86)</span><br><span class="line">at java.lang.Thread.run(Thread.java:748)</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><ul><li>如果把notifyAll改为notify，结果如下，死锁，程序没有正常退出：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Thread[Thread-2,5,main] add</span><br><span class="line">Thread[Thread-0,5,main] remove</span><br><span class="line">Thread[Thread-3,5,main] add</span><br></pre></td></tr></table></figure><p>另，转载请注明出处！文中若有什么错误希望大家探讨指正！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;生产者消费者模型是我们学习多线程知识的一个经典案例，一个典型的生产者消费者模型如下：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/spa
      
    
    </summary>
    
      <category term="技术" scheme="http://guojinyu.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://guojinyu.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>(微信&amp;支付宝)支付功能&amp;场景示意图</title>
    <link href="http://guojinyu.com/2017/11/07/(%E5%BE%AE%E4%BF%A1&amp;%E6%94%AF%E4%BB%98%E5%AE%9D)%E6%94%AF%E4%BB%98%E5%8A%9F%E8%83%BD&amp;%E5%9C%BA%E6%99%AF%E7%A4%BA%E6%84%8F%E5%9B%BE/"/>
    <id>http://guojinyu.com/2017/11/07/(微信&amp;支付宝)支付功能&amp;场景示意图/</id>
    <published>2017-11-07T02:50:00.000Z</published>
    <updated>2018-06-02T15:56:11.502Z</updated>
    
    <content type="html"><![CDATA[<p>许久没有写博客了，有时候写再多字不如一幅图来的简单直接。<br>移动支付如火如荼，所以，如下：</p><center><br>![(微信&amp;支付宝)支付功能&amp;场景示意图][1]<br></center><p>谢绝转载！<br>[1]: <a href="http://obc3atr48.bkt.clouddn.com/%28%E5%BE%AE%E4%BF%A1&amp;%E6%94%AF%E4%BB%98%E5%AE%9D%29%E6%94%AF%E4%BB%98%E5%8A%9F%E8%83%BD&amp;%E5%9C%BA%E6%99%AF%E7%A4%BA%E6%84%8F%E5%9B%BE.png" target="_blank" rel="noopener">http://obc3atr48.bkt.clouddn.com/%28%E5%BE%AE%E4%BF%A1&amp;%E6%94%AF%E4%BB%98%E5%AE%9D%29%E6%94%AF%E4%BB%98%E5%8A%9F%E8%83%BD&amp;%E5%9C%BA%E6%99%AF%E7%A4%BA%E6%84%8F%E5%9B%BE.png</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;许久没有写博客了，有时候写再多字不如一幅图来的简单直接。&lt;br&gt;移动支付如火如荼，所以，如下：&lt;/p&gt;
&lt;center&gt;&lt;br&gt;![(微信&amp;amp;支付宝)支付功能&amp;amp;场景示意图][1]&lt;br&gt;&lt;/center&gt;

&lt;p&gt;谢绝转载！&lt;br&gt;[1]: &lt;a href=&quot;
      
    
    </summary>
    
      <category term="技术" scheme="http://guojinyu.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="业务" scheme="http://guojinyu.com/tags/%E4%B8%9A%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Android HTTPS正传</title>
    <link href="http://guojinyu.com/2017/04/05/Android%20HTTPS%E6%AD%A3%E4%BC%A0/"/>
    <id>http://guojinyu.com/2017/04/05/Android HTTPS正传/</id>
    <published>2017-04-05T14:00:00.000Z</published>
    <updated>2018-06-02T15:56:11.502Z</updated>
    
    <content type="html"><![CDATA[<p>随着HTTPS的越来越普及，我们在客户端开发过程中越来越多的被要求从HTTP转换为HTTPS，纵然你开发的是普通APP而非浏览器，正确的编写HTTPS网络代码也是至关重要的。但现实是，大部分的HTTPS相关代码中总是存在各种各样的问题，这些问题使得我们的APP在网络通信中存在严重的漏洞，从而丧失了使用HTTPS的意义。</p><p>因此，本文将从以下三个方面来展开介绍，一是对于HTTPS的理解；二是常见的HTTPS的使用误区；三是如何编写正确的HTTPS通信代码，包括使用HttpClient或HttpUrlConnection。</p><h2 id="HTTPS的理解"><a href="#HTTPS的理解" class="headerlink" title="HTTPS的理解"></a>HTTPS的理解</h2><p>熟悉的读者可以直接跳过，简单来说HTTPS=HTTP+SSL/TLS，而SSL/TLS=加密+认证+完整性保护，HTTPS协议简单理解就是在进行传统的HTTP通信之前先通过SSL/TLS协议握手建立安全的通道。</p><p>其实SSL/TLS说白了就是密码学里的一个混合密码系统，用对称加密来保护机密性，用消息认证码(MAC)来做认证和完整性保护，同时为了解决对称密码的密钥配送问题，采用了公钥加密方法，那么为了保证公钥的合法性，就由认证机构(CA)来对公钥及相关信息进行数字签名，即我们口中的证书。</p><p>其实不只是HTTPS，很多应用层的网络传输协议为了保证安全都和SSL/TLS进行了联姻，如FTPS，采用SSL/TLS的IMAP、POP3/SMTP、Telnet协议等。</p><h2 id="HTTPS的使用误区"><a href="#HTTPS的使用误区" class="headerlink" title="HTTPS的使用误区"></a>HTTPS的使用误区</h2><p>Android APP在HTTPS上存在的最大问题就是中间人攻击漏洞，所谓中间人攻击，就是攻击人介入到通信双方的中间，假冒彼此与对方就行通信，从而套取隐私信息。而导致这一漏洞的最大的原因，就是代码中对HTTPS证书的不合理使用，确切地说，就是客户端没有校验服务端的HTTPS证书（包含签名CA是否合法、域名是否匹配、是否自签名证书、证书是否过期，此处建议认真阅读<a href="https://jaq.alibaba.com/blog.htm?id=60" target="_blank" rel="noopener">Android HTTPS中间人劫持漏洞浅析</a>这篇博文，通俗易懂）。</p><p>常见于以下两种情况：</p><ul><li><p>1.自定义X509TrustManager但是没有对SSL证书进行校验，如checkServerTrusted()方法实现为空，即不检查服务器是否可信；</p></li><li><p>2.没有对域名进行校验，如使用setHostnameVerifier(ALLOW_ALL_HOSTNAME_VERIFIER)或使用自定义HostnameVerifier但是verify()方法返回始终为True，即不校验域名。</p></li></ul><p>开发人员这样写的目的往往是规避SSL异常，但是不仅没有发挥HTTPS的能力反而暴露出了漏洞。</p><p>当然，导致中间人攻击的原因可能还有其他，如CA被攻击导致私钥被盗等等，这种情况不在本文讨论范围内。</p><a id="more"></a><h2 id="HTTPS的正确实现"><a href="#HTTPS的正确实现" class="headerlink" title="HTTPS的正确实现"></a>HTTPS的正确实现</h2><p>如何正确地实现HTTPS，关键在于如何正确地处理证书。</p><p>前文提到，证书认证机构CA会对我们HTTPS通信中用到的公钥进行签名来制作证书，其实就是服务器有一套公私钥，CA也有一套公私钥，CA要用它的私钥对我们的公钥就行数字签名，此即为认证。所以一份证书的主要内容便是三部分，a、服务器生成的公钥，b、申请证书时填写的一些相关信息，c、CA用自己的私钥对a和b内容生成的数字签名。那么当客户端在验证服务端的证书时，客户端必须拥有证书CA的公钥，才能去验证签名。</p><p>所以根据客户端是否拥有CA的公钥，处理证书便分为以下几种情况：</p><h3 id="1-CA是受信任的"><a href="#1-CA是受信任的" class="headerlink" title="1. CA是受信任的"></a>1. CA是受信任的</h3><p>这是HTTPS使用中最推荐的方式，即使用知名的证书颁发机构如Symantec(收购了VeriSign)，这类颁发机构一般在浏览器或者Android系统内置的信任CA列表里，这就意味着客户端拥有该CA的公钥，可以直接按照HTTPS握手协议从服务端获取证书，并对该CA认证的证书进行验签，获取服务端公钥。当然不足就是此类证书可能是需要收费的。</p><p>代码实现如下：</p><ul><li>HttpURLConnection(该API在Android 4.4版本及以后已替换为OkHttp实现)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">HttpURLConnection urlConnection = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    URL url = <span class="keyword">new</span> URL(<span class="string">"https://www.baidu.com"</span>);</span><br><span class="line">    urlConnection = (HttpURLConnection) url.openConnection();</span><br><span class="line">    InputStream in = urlConnection.getInputStream();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (urlConnection != <span class="keyword">null</span>) &#123;</span><br><span class="line">        urlConnection.disconnect();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种情况代码实现简单，其实和使用普通的HTTP没有任何区别，因为当url是HTTPS格式时，url.openConnection()返回的实际是HttpsURLConnection对象。</p><ul><li>HttpClient(Android 6.0版本及以后已去除该框架)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">HttpClient httpClient = <span class="keyword">new</span> DefaultHttpClient();</span><br><span class="line">HttpGet httpGet = <span class="keyword">new</span> HttpGet(<span class="string">"https://www.baidu.com/"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    HttpResponse httpResponse = httpClient.execute(httpGet);</span><br><span class="line">    <span class="keyword">if</span> (httpResponse.getStatusLine().getStatusCode() == <span class="number">200</span>)&#123;</span><br><span class="line">        HttpEntity entity = httpResponse.getEntity();</span><br><span class="line">        String response = EntityUtils.toString(entity,<span class="string">"utf-8"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样和HTTP代码的编写没有任何区别。</p><p>我们这里说的第一种方式前提是颁发证书的CA是受信任的，即使用HTTPS协议的设备或浏览器已信任目标服务端证书的签名机构。可以看到这种情况下代码的编写很简单，但是，在日常Android开发中，如此简单的方式未必能覆盖我们的需求，为什么这样说呢？由于Android碎片化现象的严重，不同版本不同设备信任的CA列表可能不尽相同，所以往往会出现一套代码在这个设备上运行正常，但在另一个设备上就javax.net.ssl.SSLException了。</p><h3 id="2-未知的CA"><a href="#2-未知的CA" class="headerlink" title="2. 未知的CA"></a>2. 未知的CA</h3><p>所谓未知的CA包含三种情况，一是设备未添加到信任列表的公共CA，二是政府、公司或教育机构等组织发放的私有CA(国内很常见，如12306网站的证书)，三是自签名的证书(这种情况严格来说并不是CA的认证，而是自己使用Keytool或OpenSSL签发证书，好比自己是自己的CA)。由于这三种情况在开发中的处理差别不大，因此归为一类。对于此类CA，通常的做法是本地内置CA证书文件或内容字符串。</p><ul><li>HttpURLConnection</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">InputStream caInput = <span class="keyword">null</span>;</span><br><span class="line">Certificate ca = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// Load CAs from an InputStream</span></span><br><span class="line">    <span class="comment">// (could be from a resource or ByteArrayInputStream or ...)</span></span><br><span class="line">    CertificateFactory cf = CertificateFactory.getInstance(<span class="string">"X.509"</span>);</span><br><span class="line">    caInput = context.getAssets().open(<span class="string">"srca.cer"</span>);</span><br><span class="line">    ca = cf.generateCertificate(caInput);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        caInput.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// Create a KeyStore containing our trusted CAs</span></span><br><span class="line">    String keyStoreType = KeyStore.getDefaultType();</span><br><span class="line">    KeyStore keyStore = KeyStore.getInstance(keyStoreType);</span><br><span class="line">    keyStore.load(<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    keyStore.setCertificateEntry(<span class="string">"ca"</span>, ca);</span><br><span class="line">    <span class="comment">// Create a TrustManager that trusts the CAs in our KeyStore</span></span><br><span class="line">    String tmfAlgorithm = TrustManagerFactory.getDefaultAlgorithm();</span><br><span class="line">    TrustManagerFactory tmf = TrustManagerFactory.getInstance(tmfAlgorithm);</span><br><span class="line">    tmf.init(keyStore);</span><br><span class="line">    <span class="comment">// Create an SSLContext that uses our TrustManager</span></span><br><span class="line">    SSLContext sslContext = SSLContext.getInstance(<span class="string">"TLS"</span>);</span><br><span class="line">    sslContext.init(<span class="keyword">null</span>, tmf.getTrustManagers(), <span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">// Tell the URLConnection to use a SocketFactory from our SSLContext</span></span><br><span class="line">    URL url = <span class="keyword">new</span> URL(<span class="string">"https://kyfw.12306.cn/otn/"</span>);</span><br><span class="line">    HttpsURLConnection urlConnection = (HttpsURLConnection) url.openConnection();</span><br><span class="line">    urlConnection.setSSLSocketFactory(sslContext.getSocketFactory());</span><br><span class="line">    InputStream in = urlConnection.getInputStream();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中srca.cer证书文件是从12306官网下载的，当然也可以获取到证书内容并在代码里定义为字符串常量。</p><ul><li>HttpClient</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">InputStream caInput = <span class="keyword">null</span>;</span><br><span class="line">Certificate ca = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// Load CAs from an InputStream</span></span><br><span class="line">    <span class="comment">// (could be from a resource or ByteArrayInputStream or ...)</span></span><br><span class="line">    CertificateFactory cf = CertificateFactory.getInstance(<span class="string">"X.509"</span>);</span><br><span class="line">    caInput = context.getAssets().open(<span class="string">"srca.cer"</span>);</span><br><span class="line">    ca = cf.generateCertificate(caInput);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        caInput.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// Create a KeyStore containing our trusted CAs</span></span><br><span class="line">    String keyStoreType = KeyStore.getDefaultType();</span><br><span class="line">    KeyStore keyStore = KeyStore.getInstance(keyStoreType);</span><br><span class="line">    keyStore.load(<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    keyStore.setCertificateEntry(<span class="string">"ca"</span>, ca);</span><br><span class="line">    SSLSocketFactory ssl = <span class="keyword">new</span> SSLSocketFactory(keyStore);</span><br><span class="line">    ssl.setHostnameVerifier(ssl.getHostnameVerifier());</span><br><span class="line">    Scheme scheme = <span class="keyword">new</span> Scheme(<span class="string">"https"</span>, ssl, <span class="number">443</span>);</span><br><span class="line">    HttpClient httpclient = <span class="keyword">new</span> DefaultHttpClient();</span><br><span class="line">    httpclient.getConnectionManager().getSchemeRegistry().register(scheme);</span><br><span class="line">    HttpGet httpGet = <span class="keyword">new</span> HttpGet(<span class="string">"https://kyfw.12306.cn/otn/"</span>);</span><br><span class="line">    HttpResponse httpResponse = httpclient.execute(httpGet);</span><br><span class="line">    <span class="keyword">if</span> (httpResponse.getStatusLine().getStatusCode() == <span class="number">200</span>) &#123;</span><br><span class="line">        HttpEntity entity = httpResponse.getEntity();</span><br><span class="line">        String response = EntityUtils.toString(entity, <span class="string">"utf-8"</span>);          </span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与HttpURLConnection相比，其实代码套路基本一致，都是先读取证书生成一个Certificate对象，然后根据证书构建KeyStore对象，最后构建SSLSocketFactory对象并和HTTP协议关联起来。</p><h3 id="3-缺少中间CA"><a href="#3-缺少中间CA" class="headerlink" title="3. 缺少中间CA"></a>3. 缺少中间CA</h3><p>何谓缺少中间证书颁发机构？其实大多数公共CA不直接签署服务器证书，而是使用自己的根CA签署中间 CA，然后用中间CA去满足我们的证书签发的请求，以降低根CA泄露风险。那么问题来了，Android 等操作系统通常仅直接信任根CA，因此中间CA就又变成了未知CA。解决这个问题主要有两个办法，分别为服务端解决和客户端解决（参考谷歌官方文档<a href="https://developer.android.com/training/articles/security-ssl.html" target="_blank" rel="noopener">通过HTTPS和SSL确保安全</a>）。</p><ul><li><p>服务端<br>配置服务器以便在服务器链中添加中间CA，使得服务器在SSL 握手期间不只向客户端发送它的证书，而是发送一个证书链，包括服务器CA以及到达可信的根CA所需要的任意中间证书。</p></li><li><p>客户端<br>不用我说大家都知道了吧，按照前文，像对待其他任何未知CA一样对待中间CA。</p></li></ul><p>对于Android开发中HTTPS的实现方式，本文分HttpURLConnection和HttpClient两套框架分别做了讲解，但实际上我们用到更多的可能是其他的一些HTTP协议开源框架，如okhttp、retrofit、volley、android-async-http等，其实万变不离其宗，这些框架大多是互相包含的关系，因此在HTTPS使用上也没有太大差别，顶多就是有些已经做了一定程度的封装，网上相关的资料也有很多，只要理解其背后的含义，相信都不难实现。</p><p>此外，在实际的HTTPS开发中我们遇到的需求或者问题可能千奇百怪，有时候我们不得不通过自定义TrustManager或HostnameVerifier来实现，但是切记这是有风险的，一定要尽可能地完成校验（签名CA是否合法、域名是否匹配、是否自签名证书、证书是否过期），在力所能及的范围内写出最为安全的代码。</p><p>文中所有代码可以在<a href="https://github.com/GuoJinyu/AndroidUtils/blob/master/HttpsUtil.java" target="_blank" rel="noopener">个人github主页</a>查看和下载。</p><p>另，转载请注明出处！文中若有什么错误希望大家探讨指正！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;随着HTTPS的越来越普及，我们在客户端开发过程中越来越多的被要求从HTTP转换为HTTPS，纵然你开发的是普通APP而非浏览器，正确的编写HTTPS网络代码也是至关重要的。但现实是，大部分的HTTPS相关代码中总是存在各种各样的问题，这些问题使得我们的APP在网络通信中存在严重的漏洞，从而丧失了使用HTTPS的意义。&lt;/p&gt;
&lt;p&gt;因此，本文将从以下三个方面来展开介绍，一是对于HTTPS的理解；二是常见的HTTPS的使用误区；三是如何编写正确的HTTPS通信代码，包括使用HttpClient或HttpUrlConnection。&lt;/p&gt;
&lt;h2 id=&quot;HTTPS的理解&quot;&gt;&lt;a href=&quot;#HTTPS的理解&quot; class=&quot;headerlink&quot; title=&quot;HTTPS的理解&quot;&gt;&lt;/a&gt;HTTPS的理解&lt;/h2&gt;&lt;p&gt;熟悉的读者可以直接跳过，简单来说HTTPS=HTTP+SSL/TLS，而SSL/TLS=加密+认证+完整性保护，HTTPS协议简单理解就是在进行传统的HTTP通信之前先通过SSL/TLS协议握手建立安全的通道。&lt;/p&gt;
&lt;p&gt;其实SSL/TLS说白了就是密码学里的一个混合密码系统，用对称加密来保护机密性，用消息认证码(MAC)来做认证和完整性保护，同时为了解决对称密码的密钥配送问题，采用了公钥加密方法，那么为了保证公钥的合法性，就由认证机构(CA)来对公钥及相关信息进行数字签名，即我们口中的证书。&lt;/p&gt;
&lt;p&gt;其实不只是HTTPS，很多应用层的网络传输协议为了保证安全都和SSL/TLS进行了联姻，如FTPS，采用SSL/TLS的IMAP、POP3/SMTP、Telnet协议等。&lt;/p&gt;
&lt;h2 id=&quot;HTTPS的使用误区&quot;&gt;&lt;a href=&quot;#HTTPS的使用误区&quot; class=&quot;headerlink&quot; title=&quot;HTTPS的使用误区&quot;&gt;&lt;/a&gt;HTTPS的使用误区&lt;/h2&gt;&lt;p&gt;Android APP在HTTPS上存在的最大问题就是中间人攻击漏洞，所谓中间人攻击，就是攻击人介入到通信双方的中间，假冒彼此与对方就行通信，从而套取隐私信息。而导致这一漏洞的最大的原因，就是代码中对HTTPS证书的不合理使用，确切地说，就是客户端没有校验服务端的HTTPS证书（包含签名CA是否合法、域名是否匹配、是否自签名证书、证书是否过期，此处建议认真阅读&lt;a href=&quot;https://jaq.alibaba.com/blog.htm?id=60&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Android HTTPS中间人劫持漏洞浅析&lt;/a&gt;这篇博文，通俗易懂）。&lt;/p&gt;
&lt;p&gt;常见于以下两种情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1.自定义X509TrustManager但是没有对SSL证书进行校验，如checkServerTrusted()方法实现为空，即不检查服务器是否可信；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2.没有对域名进行校验，如使用setHostnameVerifier(ALLOW_ALL_HOSTNAME_VERIFIER)或使用自定义HostnameVerifier但是verify()方法返回始终为True，即不校验域名。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;开发人员这样写的目的往往是规避SSL异常，但是不仅没有发挥HTTPS的能力反而暴露出了漏洞。&lt;/p&gt;
&lt;p&gt;当然，导致中间人攻击的原因可能还有其他，如CA被攻击导致私钥被盗等等，这种情况不在本文讨论范围内。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://guojinyu.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://guojinyu.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android屏幕适配与资源匹配</title>
    <link href="http://guojinyu.com/2016/12/19/Android%E5%B1%8F%E5%B9%95%E9%80%82%E9%85%8D%E4%B8%8E%E8%B5%84%E6%BA%90%E5%8C%B9%E9%85%8D/"/>
    <id>http://guojinyu.com/2016/12/19/Android屏幕适配与资源匹配/</id>
    <published>2016-12-19T07:42:00.000Z</published>
    <updated>2018-06-02T15:56:11.512Z</updated>
    
    <content type="html"><![CDATA[<p>Android屏幕适配是个头疼的问题，同时关于这方面的讲解也是烂大街了，那么为什么还要写这篇博文呢，一方面是想基于Google官方教程和个人开发中的经验总结一份准确精炼的教程，另一方面也是作为一个知识备份。</p><p>那么，通过本文你可以学到以下这些：</p><p>1.Android界面开发中的那些名词的概念<br>2.如何和一名不懂Android的UI设计师合作<br>3.Android如何进行资源匹配</p><p>对应以下三块内容：</p><h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><p><strong>px</strong><br>px(pixel)即像素，没什么好说的，所有电子图形设备能够显示的最小粒度的单位，和尺寸什么的无关，一般设备每一个像素点都是一个正方形。我们常说的1080p或者2k屏就是指的像素。</p><p><strong>inch</strong><br>inch即英寸，没啥好说的，一般我们所说的几寸屏就是指的屏幕对角线是几英寸。Android曾经将屏幕尺寸组概括为四种：small、normal、large和xlarge，但是自Android 3.2(API=13)开始，这套尺寸组已弃用，而采用根据可用屏幕宽度管理屏幕尺寸的新技术。</p><p><strong>dpi</strong><br>dpi(dots per inch)即每英寸的像素点的个数，这个值可以表示屏幕密度。Android目前把所有的屏幕密度归纳为六种通用dpi：</p><blockquote><p>ldpi ～120dpi<br>mdpi ～160dpi (baseline)<br>hdpi ～240dpi<br>xhdpi ～320dpi<br>xxhdpi ～480dpi<br>xxxhdpi ～640dpi  </p></blockquote><a id="more"></a><p>需要说明的是，上面的每种规格都只是圈定了一个范围，近似于后面的dpi数值，比如对于两台声明自己是hdpi屏幕密度的设备，其实际dpi值可能略有不同。此外，Android官方把mdpi定为基准(baseline)，这个基准有什么用呢，后面就可以看到了。</p><p><strong>density</strong><br>density是真正意义上的屏幕密度，<strong><em>density=dpi/160</em></strong>，160是什么呢？正是我们上面说的基准mdpi的dpi值。在开发中可以由以下代码得到：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getResources().getDisplayMetrics().density;</span><br></pre></td></tr></table></figure></p><p><strong>dp</strong><br>dp或dip(device independent pixels)即设备独立像素，Android特有的尺寸度量单位，设计的目的就是让其值在不同屏幕密度下能保持统一。在基准密度mdpi下，1dp=1px，因此dp和px的换算关系为<strong><em>dp=px/density=px/(dpi/160)</em></strong></p><p><strong>sp</strong><br>sp(scaled pixels),可以大致翻译为比例像素，专门用于设置文字大小，其实其他和dp一样，唯一的不同就是会随着设备字体大小的设置项的改变而变化。</p><h2 id="如何根据UI标注的px来开发"><a href="#如何根据UI标注的px来开发" class="headerlink" title="如何根据UI标注的px来开发"></a>如何根据UI标注的px来开发</h2><p>专业的UI设计师可能会给Android开发人员按照dp值来进行标注，并分几种不同的屏幕密度如hdpi、xhdpi来准备两套以上切图。但是很多“iOS系”的设计师会直接按照iPhone的模版来出图，并且按照iOS惯用的px来标注，然后发给一脸懵逼的我们。这个时候我们要去知道UI设计所采用的界面分辨率(720p?1080p?)是多少，当然最好也要知道目标设备屏幕尺寸是多少，比如同样是1080p，手机和平板的屏幕尺寸可是要差很大的。总而言之，我们是要确定依照哪种屏幕密度(hdpi?xhdpi?)来处理这套标注与切图。靠什么呢，靠下面这个主流机型屏幕尺寸表来映射吧(即使不知道具体的目标屏幕尺寸也没关系，只要知道你做的是手机还是平板应用就行了，然后基本上按照屏幕分辨率来选择吧)。</p><blockquote><p>ldpi density=0.75  2.7”:240x320,3.3”:240x400,3.4”:240x432<br>mdpi density=1  3.2”:320x480,5.1”:480x800,5.4”:480x854   (Tablet)7.0”:1024x600,10.1”:1280x800<br>hdpi density=1.5  3.7”:480x800,3.7”:480x854,4.0”:480x800<br>xhdpi density=2  4.65”:720x1280,4.7”:720x1280,4.7”:768x1280  (Tablet)7.0”:1200x1920,8.9”:2048x1536,10.1”:2560x1600<br>xxhdpi density=3  5.0”:1080x1920<br>560dpi  5.7”:1400*2560  </p></blockquote><p>一般UI设计师在设计手机APP时，除了按照iPhone的尺寸来出图，可能比较常用的是720x1280或者1080x1920这两个分辨率，那么若是720x1280px，我们就可以直接按照xhdpi来将标注图上的px值转化为dp，dp=px/density=px/2，然后所有对应的切图也就不用犹豫，直接丢入到drawable-xhdpi里即可；同理，若是1080x1920px，按照xxhdpi来处理，等等。需要说明的是，很多网上的教程在屏幕适配方面建议每个尺寸的资源文件夹都放入一套资源文件，或者建议只准备一套hdpi的资源文件。这都不是很合理的，前者的话可能对于一些比较特殊或者重要的素材需要这样处理，否则的话这会大大增加apk文件的体积，因此对于要求不是特别高的情况，只准备一至两套即可，Android系统在显示图片的时候会根据自身dpi和素材所在drawable文件夹的dpi来自动进行放大或缩小；后者的话已经过时了，时代在进步，社会在发展，现在市场上的主流机型是大屏手机了，目前应该是xhdpi和xxhdpi为主流，因此在设计和准备图片资源的时候最好围绕这二者来做，当然，仅限于当下。</p><h2 id="Android如何进行最佳资源匹配"><a href="#Android如何进行最佳资源匹配" class="headerlink" title="Android如何进行最佳资源匹配"></a>Android如何进行最佳资源匹配</h2><p>在运行时，Android会检测当前设备配置并为应用加载合适的资源。那么Android如何去寻找它所认为的最合适的资源呢？假设有很多drawable目录分别包含相同图片资源的不同版本，那么参照以下流程图，匹配的过程如下：</p><center><br><img src="http://obc3atr48.bkt.clouddn.com/res-selection-flowchart%20%281%29.png" alt="Android资源匹配流程图"><br></center><p>1.<strong>淘汰与设备配置冲突的资源文件</strong><br>何谓与设备配置冲突的资源文件，这就不得不提到资源限定符了，比如我们默认生成的资源文件夹drawable-hdpi/中的hdpi就是一种限定符，实际上，限定符克不止屏幕像素密度这一种类型而是有很多，比如语言，屏幕方向，夜间模式，文本输入法，API级别等等十多种，如果要使用这些限定符则必须按照官方定义的规则去排序，比如drawable-en-port-xhdpi-12key/，顺序错误的话该资源文件夹会被忽略。理解了资源限定符这个概念，那么这一步就好理解了，那就是Android系统会根据当前设备的一系列配置去淘汰掉存在不匹配的资源限定符的文件夹，如语言不匹配或屏幕方向不匹配等等，但是要注意，屏幕像素密度是唯一一个不会因冲突而被淘汰的限定符。比如尽管设备的屏幕密度为hdpi，但是drawable-port-ldpi/不会被淘汰，因为此时每个屏幕密度均视为匹配。  </p><p>2.<strong>双重循环(第一层遍历资源限定符，第二层遍历资源文件夹)</strong><br>按照限定符的优先级顺序选取下一个限定符，然后查找是否有资源目录包含此限定符，都没有的话换下一个限定符，如果有的话淘汰掉不含该限定符的资源文件夹，在剩余的资源文件夹里再匹配下一个限定符。可想而知，一般情况下，通过这样一个双重循环匹配，最终会只剩一个资源目录，便是最合适的资源。不一般的情况往下看。  </p><p>3.<strong>特殊情况</strong><br>在步骤2中有一个例外，如果资源限定符的遍历走到了屏幕像素密度这一步，又没有完全匹配的资源文件夹，则Android会按比例缩小更高密度的资源或者放大更低密度的资源，比例系数为期望的dpi标准与实际的dpi标准的比值。就目前查找到的资料显示，通常，Android会选择一个能达到最佳效果的资源文件，因此它倾向于缩小大型原始图像，而不是放大小型原始图像。例如，设备是ldpi属性，但目前可用的资源文件有mdpi和hdpi版本，系统会优先选择缩小hdpi版本，因为系统可轻松以0.5为系数将hdpi资源缩小至ldpi资源，与以0.75为系数缩小mdpi中密度资源相比，伪影更少。此外，还有一点需要说明的是，系统会将drawable/ 中的资源作为“默认”资源，也就是指未标记配置限定符的资源，系统假设默认资源设计用于基线屏幕尺寸和密度，即mpdi，并在没有更合适的资源文件夹的情况下选择该文件夹中的资源，因此你的图片资源文件最好不要放置在该文件夹里，而是要放置在指定dpi的文件夹里。</p><p>Ref:<br>1.<a href="https://developer.android.com/guide/practices/screens_support.html" target="_blank" rel="noopener">支持多种屏幕</a><br>2.<a href="https://developer.android.com/guide/topics/resources/providing-resources.html" target="_blank" rel="noopener">提供资源</a></p><p>另，转载请注明出处！文中若有什么错误希望大家探讨指正！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android屏幕适配是个头疼的问题，同时关于这方面的讲解也是烂大街了，那么为什么还要写这篇博文呢，一方面是想基于Google官方教程和个人开发中的经验总结一份准确精炼的教程，另一方面也是作为一个知识备份。&lt;/p&gt;
&lt;p&gt;那么，通过本文你可以学到以下这些：&lt;/p&gt;
&lt;p&gt;1.Android界面开发中的那些名词的概念&lt;br&gt;2.如何和一名不懂Android的UI设计师合作&lt;br&gt;3.Android如何进行资源匹配&lt;/p&gt;
&lt;p&gt;对应以下三块内容：&lt;/p&gt;
&lt;h2 id=&quot;名词解释&quot;&gt;&lt;a href=&quot;#名词解释&quot; class=&quot;headerlink&quot; title=&quot;名词解释&quot;&gt;&lt;/a&gt;名词解释&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;px&lt;/strong&gt;&lt;br&gt;px(pixel)即像素，没什么好说的，所有电子图形设备能够显示的最小粒度的单位，和尺寸什么的无关，一般设备每一个像素点都是一个正方形。我们常说的1080p或者2k屏就是指的像素。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;inch&lt;/strong&gt;&lt;br&gt;inch即英寸，没啥好说的，一般我们所说的几寸屏就是指的屏幕对角线是几英寸。Android曾经将屏幕尺寸组概括为四种：small、normal、large和xlarge，但是自Android 3.2(API=13)开始，这套尺寸组已弃用，而采用根据可用屏幕宽度管理屏幕尺寸的新技术。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;dpi&lt;/strong&gt;&lt;br&gt;dpi(dots per inch)即每英寸的像素点的个数，这个值可以表示屏幕密度。Android目前把所有的屏幕密度归纳为六种通用dpi：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ldpi ～120dpi&lt;br&gt;mdpi ～160dpi (baseline)&lt;br&gt;hdpi ～240dpi&lt;br&gt;xhdpi ～320dpi&lt;br&gt;xxhdpi ～480dpi&lt;br&gt;xxxhdpi ～640dpi  &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="技术" scheme="http://guojinyu.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://guojinyu.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android二维码扫描的简单实现及源码分析</title>
    <link href="http://guojinyu.com/2016/12/07/Android%E4%BA%8C%E7%BB%B4%E7%A0%81%E6%89%AB%E6%8F%8F%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E5%8F%8A%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://guojinyu.com/2016/12/07/Android二维码扫描的简单实现及源码分析/</id>
    <published>2016-12-07T11:30:00.000Z</published>
    <updated>2018-06-03T16:29:58.041Z</updated>
    
    <content type="html"><![CDATA[<p>二维码扫描最近两年简直是风靡移动互联网时代，尤其在国内发展神速。围绕条码扫码功能，首先说说通过本文你可以知道啥。一，如何在你的APP中快速集成一维码、二维码扫描功能；二，大概了解条码扫描功能的实现原理以及理解各个模块的代码。但是，本文不包含条码的编解码原理，如有兴趣，请自行查阅。</p><h2 id="条码扫描功能的快速集成"><a href="#条码扫描功能的快速集成" class="headerlink" title="条码扫描功能的快速集成"></a>条码扫描功能的快速集成</h2><p>默认你使用了Android Stuidio进行开发，直接使用这个开源项目<a href="https://github.com/GuoJinyu/SimpleZXing" target="_blank" rel="noopener">SimpleZXing</a>,它是在ZXing库的作者为Android写的条码扫描APP Barcode Scanner的基础上优化而成的。<br>你可以通过简单的两步就可以实现条码扫描的功能。</p><ul><li>1.添加项目依赖  </li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">compile</span> <span class="string">'com.acker:simplezxing:1.5'</span></span><br></pre></td></tr></table></figure><ul><li>2.在你想调起条码扫描界面的地方(比如YourActivity)，调起二维码扫描界面CaptureActivity  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startActivityForResult(<span class="keyword">new</span> Intent(YourActivity.<span class="keyword">this</span>, CaptureActivity.class), CaptureActivity.REQ_CODE)</span><br></pre></td></tr></table></figure><a id="more"></a><p>然后就会打开如下这个界面：</p><p><center><br><img src="http://obc3atr48.bkt.clouddn.com/WechatIMG22.jpeg" alt="条码扫描界面"><br></center><br>将条码置于框内，扫描成功后会将解码得到的字符串返回给调起者，所以你只需要在你的Activity的onActivityResult()方法里拿到它进行后续操作即可。</p><p>当然SimpleZXing目前还支持一些设置项，包括摄像头是否开启曝光，扫码成功后是否震动，是否发声，闪光灯模式自动、常开、常关，屏幕自动旋转、横屏、竖屏。</p><p>同时，虽然该项目已经在manifest里申明了所需的照相机权限，但是在Android 6.0以上系统中你仍然需要自己处理动态权限管理。所以一个标准的使用方式如以下代码所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.acker.simplezxing.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.Manifest;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.content.pm.PackageManager;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.NonNull;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.ActivityCompat;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.content.ContextCompat;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.acker.simplezxing.activity.CaptureActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REQ_CODE_PERMISSION = <span class="number">0x1111</span>;</span><br><span class="line">    <span class="keyword">private</span> TextView tvResult;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        tvResult = (TextView) findViewById(R.id.tv_result);</span><br><span class="line">        Button btn = (Button) findViewById(R.id.btn_sm);</span><br><span class="line">        btn.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// Open Scan Activity</span></span><br><span class="line">                <span class="keyword">if</span> (ContextCompat.checkSelfPermission(MainActivity.<span class="keyword">this</span>, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">                    <span class="comment">// Do not have the permission of camera, request it.</span></span><br><span class="line">                    ActivityCompat.requestPermissions(MainActivity.<span class="keyword">this</span>, <span class="keyword">new</span> String[]&#123;Manifest.permission.CAMERA&#125;, REQ_CODE_PERMISSION);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// Have gotten the permission</span></span><br><span class="line">                    startCaptureActivityForResult();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startCaptureActivityForResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, CaptureActivity.class);</span><br><span class="line">        Bundle bundle = <span class="keyword">new</span> Bundle();</span><br><span class="line">        bundle.putBoolean(CaptureActivity.KEY_NEED_BEEP, CaptureActivity.VALUE_BEEP);</span><br><span class="line">        bundle.putBoolean(CaptureActivity.KEY_NEED_VIBRATION, CaptureActivity.VALUE_VIBRATION);</span><br><span class="line">        bundle.putBoolean(CaptureActivity.KEY_NEED_EXPOSURE, CaptureActivity.VALUE_NO_EXPOSURE);</span><br><span class="line">        bundle.putByte(CaptureActivity.KEY_FLASHLIGHT_MODE, CaptureActivity.VALUE_FLASHLIGHT_OFF);</span><br><span class="line">        bundle.putByte(CaptureActivity.KEY_ORIENTATION_MODE, CaptureActivity.VALUE_ORIENTATION_AUTO);</span><br><span class="line">        bundle.putBoolean(CaptureActivity.KEY_SCAN_AREA_FULL_SCREEN, CaptureActivity.VALUE_SCAN_AREA_FULL_SCREEN);</span><br><span class="line">        bundle.putBoolean(CaptureActivity.KEY_NEED_SCAN_HINT_TEXT, CaptureActivity.VALUE_SCAN_HINT_TEXT);</span><br><span class="line">        intent.putExtra(CaptureActivity.EXTRA_SETTING_BUNDLE, bundle);</span><br><span class="line">        startActivityForResult(intent, CaptureActivity.REQ_CODE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, @NonNull String[] permissions, @NonNull <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);</span><br><span class="line">        <span class="keyword">switch</span> (requestCode) &#123;</span><br><span class="line">            <span class="keyword">case</span> REQ_CODE_PERMISSION: &#123;</span><br><span class="line">                <span class="keyword">if</span> (grantResults.length &gt; <span class="number">0</span> &amp;&amp; grantResults[<span class="number">0</span>] == PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">                    <span class="comment">// User agree the permission</span></span><br><span class="line">                    startCaptureActivityForResult();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// User disagree the permission</span></span><br><span class="line">                    Toast.makeText(<span class="keyword">this</span>, <span class="string">"You must agree the camera permission request before you use the code scan function"</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onActivityResult(requestCode, resultCode, data);</span><br><span class="line">        <span class="keyword">switch</span> (requestCode) &#123;</span><br><span class="line">            <span class="keyword">case</span> CaptureActivity.REQ_CODE:</span><br><span class="line">                <span class="keyword">switch</span> (resultCode) &#123;</span><br><span class="line">                    <span class="keyword">case</span> RESULT_OK:</span><br><span class="line">                        tvResult.setText(data.getStringExtra(CaptureActivity.EXTRA_SCAN_RESULT));  </span><br><span class="line">                        <span class="comment">//or do sth</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> RESULT_CANCELED:</span><br><span class="line">                        <span class="keyword">if</span> (data != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="comment">// for some reason camera is not working correctly</span></span><br><span class="line">                            tvResult.setText(data.getStringExtra(CaptureActivity.EXTRA_SCAN_RESULT));</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上说了如何通过使用SimpleZXing开源项目来快速实现条码扫描功能，当然开发者可能会因为一些特定的需求需要修改某些地方的代码，如UI等等，那么下面我会带大家大致讲解一下这个开源项目的代码，使大家更进一步了解条码扫描的实现机制，同时方便大家在它基础之上进行修改。</p><h2 id="SimpleZXing关键代码分析"><a href="#SimpleZXing关键代码分析" class="headerlink" title="SimpleZXing关键代码分析"></a>SimpleZXing关键代码分析</h2><p>其实条码扫描的过程很容易理解，就是将摄像头捕捉到的预览帧数组进行处理，发现其中的一维码或二维码并进行解码。但是就是在摄像头捕捉数据的过程中有几个重要的地方需要大家注意。我们倒过来分析这个过程。</p><h3 id="1-DecodeHandler-class中的decode-方法"><a href="#1-DecodeHandler-class中的decode-方法" class="headerlink" title="1.DecodeHandler.class中的decode()方法"></a>1.DecodeHandler.class中的decode()方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Decode the data within the viewfinder rectangle, and time how long it took. For efficiency,</span></span><br><span class="line"><span class="comment"> * reuse the same reader objects from one decode to the next.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> data   The YUV preview frame.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> width  The width of the preview frame.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> height The height of the preview frame.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">decode</span><span class="params">(<span class="keyword">byte</span>[] data, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">if</span> (width &lt; height) &#123;</span><br><span class="line">        <span class="comment">// portrait</span></span><br><span class="line">        <span class="keyword">byte</span>[] rotatedData = <span class="keyword">new</span> <span class="keyword">byte</span>[data.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; width; x++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; height; y++)</span><br><span class="line">                rotatedData[y * width + width - x - <span class="number">1</span>] = data[y + x * height];</span><br><span class="line">        &#125;</span><br><span class="line">        data = rotatedData;</span><br><span class="line">    &#125;</span><br><span class="line">    Result rawResult = <span class="keyword">null</span>;</span><br><span class="line">    PlanarYUVLuminanceSource source = activity.getCameraManager().buildLuminanceSource(data, width, height);</span><br><span class="line">    <span class="keyword">if</span> (source != <span class="keyword">null</span>) &#123;</span><br><span class="line">        BinaryBitmap bitmap = <span class="keyword">new</span> BinaryBitmap(<span class="keyword">new</span> HybridBinarizer(source));</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            rawResult = multiFormatReader.decodeWithState(bitmap);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ReaderException re) &#123;</span><br><span class="line">            <span class="comment">// continue</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            multiFormatReader.reset();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Handler handler = activity.getHandler();</span><br><span class="line">    <span class="keyword">if</span> (rawResult != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Don't log the barcode contents for security.</span></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        Log.d(TAG, <span class="string">"Found barcode in "</span> + (end - start) + <span class="string">" ms"</span>);</span><br><span class="line">        <span class="keyword">if</span> (handler != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Message message = Message.obtain(handler, R.id.decode_succeeded, rawResult);</span><br><span class="line">            message.sendToTarget();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (handler != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Message message = Message.obtain(handler, R.id.decode_failed);</span><br><span class="line">            message.sendToTarget();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然，这个时候处理解码的线程对应的Handler已经拿到了预览帧的byte数组以及预览帧的高和宽。在这个方法中，我们首先根据此时屏幕是横屏还是竖屏对预览帧数组进行了一个预处理。</p><p>因为在Android设备上，存在以下<a href="https://gold.xitu.io/entry/56aa36fad342d300542e7510" target="_blank" rel="noopener">几个概念</a>：</p><blockquote><p>屏幕方向：在Android系统中，屏幕的左上角是坐标系统的原点（0,0）坐标。原点向右延伸是X轴正方向，原点向下延伸是Y轴正方向。</p></blockquote><blockquote><p>相机传感器方向：手机相机的图像数据都是来自于摄像头硬件的图像传感器，这个传感器在被固定到手机上后有一个默认的取景方向，坐标原点位于手机横放时的左上角，即与横屏应用的屏幕X方向一致。换句话说，与竖屏应用的屏幕X方向呈90度角。</p></blockquote><blockquote><p>相机的预览方向：由于手机屏幕可以360度旋转，为了保证用户无论怎么旋转手机都能看到“正确”的预览画面（这个“正确”是指显示在UI预览界面的画面与人眼看到的眼前的画面是一致的），Android系统底层根据当前手机屏幕的方向对图像传感器采集到的数据进行了旋转处理，然后才送给显示系统，因此可以保证预览画面始终“正确”。在相机API中可以通过setDisplayOrientation()设置相机预览方向。在默认情况下，这个值为0，与图像传感器一致。因此对于横屏应用来说，由于屏幕方向和预览方向一致，预览图像不会颠倒90度。但是对于竖屏应用，屏幕方向和预览方向垂直，所以会出现颠倒90度现象。为了得到正确的预览画面，必须通过API将相机的预览方向旋转90，保持与屏幕方向一致，如图3所示。</p></blockquote><p>也就是说，相机得到的图像数据始终是一个横屏的姿态，当手机处于竖屏时，即使我们通过设置在屏幕上看到的拍摄画面是准确的，没有90度翻转的，我们通过API得到的图像数据仍然是基于横屏的，因此在判断到width &lt; height即屏幕处于竖屏状态时，我们首先对byte数组进行一个手动90度旋转，然后将结果构造为一个PlanarYUVLuminanceSource对象，进行真正的解析处理去了，这里我们就不管了。</p><p>然后再看这个预览帧数据是怎么来的。</p><h3 id="2-PreviewCallback-class中的onPreviewFrame-方法"><a href="#2-PreviewCallback-class中的onPreviewFrame-方法" class="headerlink" title="2.PreviewCallback.class中的onPreviewFrame()方法"></a>2.PreviewCallback.class中的onPreviewFrame()方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPreviewFrame</span><span class="params">(<span class="keyword">byte</span>[] data, Camera camera)</span> </span>&#123;</span><br><span class="line">    Point cameraResolution = configManager.getCameraResolution();</span><br><span class="line">    Handler thePreviewHandler = previewHandler;</span><br><span class="line">    <span class="keyword">if</span> (cameraResolution != <span class="keyword">null</span> &amp;&amp; thePreviewHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Message message;</span><br><span class="line">        Point screenResolution = configManager.getScreenResolution();</span><br><span class="line">        <span class="keyword">if</span> (screenResolution.x &lt; screenResolution.y)&#123;</span><br><span class="line">            <span class="comment">// portrait</span></span><br><span class="line">            message = thePreviewHandler.obtainMessage(previewMessage, cameraResolution.y,</span><br><span class="line">                    cameraResolution.x, data);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// landscape</span></span><br><span class="line">            message = thePreviewHandler.obtainMessage(previewMessage, cameraResolution.x,</span><br><span class="line">                    cameraResolution.y, data);</span><br><span class="line">        &#125;</span><br><span class="line">        message.sendToTarget();</span><br><span class="line">        previewHandler = <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"Got preview callback, but no handler or resolution available"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个容易理解，就是系统Camera.PreviewCallback接口，并实现了回调方法，每次获取到预览帧时将图像数据进行回调，同样区分了横竖屏的情况以方便上文decode时的预处理。这里出现了cameraResolution和screenResolution两个对象，我们接下来看看它们分别是什么。</p><h3 id="3-CameraConfigurationManager-class中的initFromCameraParameters-方法"><a href="#3-CameraConfigurationManager-class中的initFromCameraParameters-方法" class="headerlink" title="3.CameraConfigurationManager.class中的initFromCameraParameters()方法"></a>3.CameraConfigurationManager.class中的initFromCameraParameters()方法</h3><p>我们可以看到，上面提到的cameraResolution和screenResolution是在CameraConfigurationManager.class中的initFromCameraParameters()方法中得到的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Reads, one time, values from the camera that are needed by the app.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initFromCameraParameters</span><span class="params">(OpenCamera camera)</span> </span>&#123;</span><br><span class="line">    Camera.Parameters parameters = camera.getCamera().getParameters();</span><br><span class="line">    WindowManager manager = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);</span><br><span class="line">    Display display = manager.getDefaultDisplay();</span><br><span class="line">    <span class="keyword">int</span> displayRotation = display.getRotation();</span><br><span class="line">    <span class="keyword">int</span> cwRotationFromNaturalToDisplay;</span><br><span class="line">    <span class="keyword">switch</span> (displayRotation) &#123;</span><br><span class="line">        <span class="keyword">case</span> Surface.ROTATION_0:</span><br><span class="line">            cwRotationFromNaturalToDisplay = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Surface.ROTATION_90:</span><br><span class="line">            cwRotationFromNaturalToDisplay = <span class="number">90</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Surface.ROTATION_180:</span><br><span class="line">            cwRotationFromNaturalToDisplay = <span class="number">180</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Surface.ROTATION_270:</span><br><span class="line">            cwRotationFromNaturalToDisplay = <span class="number">270</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="comment">// Have seen this return incorrect values like -90</span></span><br><span class="line">            <span class="keyword">if</span> (displayRotation % <span class="number">90</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                cwRotationFromNaturalToDisplay = (<span class="number">360</span> + displayRotation) % <span class="number">360</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Bad rotation: "</span> + displayRotation);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Log.i(TAG, <span class="string">"Display at: "</span> + cwRotationFromNaturalToDisplay);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> cwRotationFromNaturalToCamera = camera.getOrientation();</span><br><span class="line">    Log.i(TAG, <span class="string">"Camera at: "</span> + cwRotationFromNaturalToCamera);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Still not 100% sure about this. But acts like we need to flip this:</span></span><br><span class="line">    <span class="keyword">if</span> (camera.getFacing() == CameraFacing.FRONT) &#123;</span><br><span class="line">        cwRotationFromNaturalToCamera = (<span class="number">360</span> - cwRotationFromNaturalToCamera) % <span class="number">360</span>;</span><br><span class="line">        Log.i(TAG, <span class="string">"Front camera overriden to: "</span> + cwRotationFromNaturalToCamera);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cwRotationFromDisplayToCamera =</span><br><span class="line">            (<span class="number">360</span> + cwRotationFromNaturalToCamera - cwRotationFromNaturalToDisplay) % <span class="number">360</span>;</span><br><span class="line">    Log.i(TAG, <span class="string">"Final display orientation: "</span> + cwRotationFromDisplayToCamera);</span><br><span class="line">    <span class="keyword">int</span> cwNeededRotation;</span><br><span class="line">    <span class="keyword">if</span> (camera.getFacing() == CameraFacing.FRONT) &#123;</span><br><span class="line">        Log.i(TAG, <span class="string">"Compensating rotation for front camera"</span>);</span><br><span class="line">        cwNeededRotation = (<span class="number">360</span> - cwRotationFromDisplayToCamera) % <span class="number">360</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cwNeededRotation = cwRotationFromDisplayToCamera;</span><br><span class="line">    &#125;</span><br><span class="line">    Log.i(TAG, <span class="string">"Clockwise rotation from display to camera: "</span> + cwNeededRotation);</span><br><span class="line"></span><br><span class="line">    Point theScreenResolution = <span class="keyword">new</span> Point();</span><br><span class="line">    display.getSize(theScreenResolution);</span><br><span class="line">    screenResolution = theScreenResolution;</span><br><span class="line">    Log.i(TAG, <span class="string">"Screen resolution in current orientation: "</span> + screenResolution);</span><br><span class="line">    cameraResolution = CameraConfigurationUtils.findBestPreviewSizeValue(parameters, screenResolution);</span><br><span class="line">    Log.i(TAG, <span class="string">"Camera resolution: "</span> + cameraResolution);</span><br><span class="line">    bestPreviewSize = CameraConfigurationUtils.findBestPreviewSizeValue(parameters, screenResolution);</span><br><span class="line">    Log.i(TAG, <span class="string">"Best available preview size: "</span> + bestPreviewSize);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法中前面的大段通过屏幕方向和摄像头成像方向来计算预览画面的旋转度数，从而保证预览得到的画面随着手机的旋转或者前后置摄像头的更换而保持正确的显示，当然，我们也可以看到screenResolution是通过Display类来获取到的Point对象。它的x，y值就分别代表当前屏幕的横向和纵向的像素值，当然这个是和屏幕方向有关系的。然后可以看到另外两个Point对象cameraResolution以及bestPreviewSize是通过CameraConfigurationUtils.class中的findBestPreviewSizeValue()方法得到的，那我们再来看这个方法。</p><h3 id="4-CameraConfigurationUtils-class中的findBestPreviewSizeValue-方法"><a href="#4-CameraConfigurationUtils-class中的findBestPreviewSizeValue-方法" class="headerlink" title="4.CameraConfigurationUtils.class中的findBestPreviewSizeValue()方法"></a>4.CameraConfigurationUtils.class中的findBestPreviewSizeValue()方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> Point <span class="title">findBestPreviewSizeValue</span><span class="params">(Camera.Parameters parameters, Point screenResolution)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Camera.Size&gt; rawSupportedSizes = parameters.getSupportedPreviewSizes();</span><br><span class="line">    <span class="keyword">if</span> (rawSupportedSizes == <span class="keyword">null</span>) &#123;</span><br><span class="line">        Log.w(TAG, <span class="string">"Device returned no supported preview sizes; using default"</span>);</span><br><span class="line">        Camera.Size defaultSize = parameters.getPreviewSize();</span><br><span class="line">        <span class="keyword">if</span> (defaultSize == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Parameters contained no preview size!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Point(defaultSize.width, defaultSize.height);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sort by size, descending</span></span><br><span class="line">    List&lt;Camera.Size&gt; supportedPreviewSizes = <span class="keyword">new</span> ArrayList&lt;&gt;(rawSupportedSizes);</span><br><span class="line">    Collections.sort(supportedPreviewSizes, <span class="keyword">new</span> Comparator&lt;Camera.Size&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Camera.Size a, Camera.Size b)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> aPixels = a.height * a.width;</span><br><span class="line">            <span class="keyword">int</span> bPixels = b.height * b.width;</span><br><span class="line">            <span class="keyword">if</span> (bPixels &lt; aPixels) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (bPixels &gt; aPixels) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Log.isLoggable(TAG, Log.INFO)) &#123;</span><br><span class="line">        StringBuilder previewSizesString = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (Camera.Size supportedPreviewSize : supportedPreviewSizes) &#123;</span><br><span class="line">            previewSizesString.append(supportedPreviewSize.width).append(<span class="string">'x'</span>)</span><br><span class="line">                    .append(supportedPreviewSize.height).append(<span class="string">' '</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Log.i(TAG, <span class="string">"Supported preview sizes: "</span> + previewSizesString);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> screenAspectRatio = screenResolution.x / (<span class="keyword">double</span>) screenResolution.y;</span><br><span class="line">    <span class="comment">// Remove sizes that are unsuitable</span></span><br><span class="line">    Iterator&lt;Camera.Size&gt; it = supportedPreviewSizes.iterator();</span><br><span class="line">    <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">        Camera.Size supportedPreviewSize = it.next();</span><br><span class="line">        <span class="keyword">int</span> realWidth = supportedPreviewSize.width;</span><br><span class="line">        <span class="keyword">int</span> realHeight = supportedPreviewSize.height;</span><br><span class="line">        <span class="keyword">if</span> (realWidth * realHeight &lt; MIN_PREVIEW_PIXELS) &#123;</span><br><span class="line">            it.remove();</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">boolean</span> isScreenPortrait = screenResolution.x &lt; screenResolution.y;</span><br><span class="line">        <span class="keyword">int</span> maybeFlippedWidth = isScreenPortrait ? realHeight : realWidth;</span><br><span class="line">        <span class="keyword">int</span> maybeFlippedHeight = isScreenPortrait ? realWidth : realHeight;</span><br><span class="line">        <span class="keyword">double</span> aspectRatio = (<span class="keyword">double</span>) maybeFlippedWidth / (<span class="keyword">double</span>) maybeFlippedHeight;</span><br><span class="line">        <span class="keyword">double</span> distortion = Math.abs(aspectRatio - screenAspectRatio);</span><br><span class="line">        <span class="keyword">if</span> (distortion &gt; MAX_ASPECT_DISTORTION) &#123;</span><br><span class="line">            it.remove();</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (maybeFlippedWidth == screenResolution.x &amp;&amp; maybeFlippedHeight == screenResolution.y) &#123;</span><br><span class="line">            Point exactPoint = <span class="keyword">new</span> Point(realWidth, realHeight);</span><br><span class="line">            Log.i(TAG, <span class="string">"Found preview size exactly matching screen size: "</span> + exactPoint);</span><br><span class="line">            <span class="keyword">return</span> exactPoint;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If no exact match, use largest preview size. This was not a great idea on older devices because</span></span><br><span class="line">    <span class="comment">// of the additional computation needed. We're likely to get here on newer Android 4+ devices, where</span></span><br><span class="line">    <span class="comment">// the CPU is much more powerful.</span></span><br><span class="line">    <span class="keyword">if</span> (!supportedPreviewSizes.isEmpty()) &#123;</span><br><span class="line">        Camera.Size largestPreview = supportedPreviewSizes.get(<span class="number">0</span>);</span><br><span class="line">        Point largestSize = <span class="keyword">new</span> Point(largestPreview.width, largestPreview.height);</span><br><span class="line">        Log.i(TAG, <span class="string">"Using largest suitable preview size: "</span> + largestSize);</span><br><span class="line">        <span class="keyword">return</span> largestSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If there is nothing at all suitable, return current preview size</span></span><br><span class="line">    Camera.Size defaultPreview = parameters.getPreviewSize();</span><br><span class="line">    <span class="keyword">if</span> (defaultPreview == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Parameters contained no preview size!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Point defaultSize = <span class="keyword">new</span> Point(defaultPreview.width, defaultPreview.height);</span><br><span class="line">    Log.i(TAG, <span class="string">"No suitable preview sizes, using default: "</span> + defaultSize);</span><br><span class="line">    <span class="keyword">return</span> defaultSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出所谓bestPreviewSize就是将相机支持的预览分辨率都获取到然后找一个和屏幕分辨率最接近的最为最终的结果，当然，同样，要有横竖屏的处理。<br>那么上面步骤3获取到的这些Point对象等等还有什么用呢，其实它们都将作为相机预览及显示的参数设置给Camera对象，如以下这个方法：</p><h3 id="5-CameraConfigurationManager-class中的setDesiredCameraParameters-方法"><a href="#5-CameraConfigurationManager-class中的setDesiredCameraParameters-方法" class="headerlink" title="5.CameraConfigurationManager.class中的setDesiredCameraParameters()方法"></a>5.CameraConfigurationManager.class中的setDesiredCameraParameters()方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setDesiredCameraParameters</span><span class="params">(OpenCamera camera, <span class="keyword">boolean</span> safeMode)</span> </span>&#123;</span><br><span class="line">    Camera theCamera = camera.getCamera();</span><br><span class="line">    Camera.Parameters parameters = theCamera.getParameters();</span><br><span class="line">    <span class="keyword">if</span> (parameters == <span class="keyword">null</span>) &#123;</span><br><span class="line">        Log.w(TAG, <span class="string">"Device error: no camera parameters are available. Proceeding without configuration."</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Log.i(TAG, <span class="string">"Initial camera parameters: "</span> + parameters.flatten());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (safeMode) &#123;</span><br><span class="line">        Log.w(TAG, <span class="string">"In camera config safe mode -- most settings will not be honored"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    initializeTorch(parameters, safeMode);</span><br><span class="line">    CameraConfigurationUtils.setFocus(</span><br><span class="line">            parameters,</span><br><span class="line">            <span class="keyword">true</span>,</span><br><span class="line">            <span class="keyword">true</span>,</span><br><span class="line">            safeMode);</span><br><span class="line">    <span class="keyword">if</span> (!safeMode) &#123;</span><br><span class="line">        CameraConfigurationUtils.setBarcodeSceneMode(parameters);</span><br><span class="line">        CameraConfigurationUtils.setVideoStabilization(parameters);</span><br><span class="line">        CameraConfigurationUtils.setFocusArea(parameters);</span><br><span class="line">        CameraConfigurationUtils.setMetering(parameters);</span><br><span class="line">    &#125;</span><br><span class="line">    parameters.setPreviewSize(bestPreviewSize.x, bestPreviewSize.y);</span><br><span class="line">    theCamera.setParameters(parameters);</span><br><span class="line">    theCamera.setDisplayOrientation(cwRotationFromDisplayToCamera);</span><br><span class="line">    Camera.Parameters afterParameters = theCamera.getParameters();</span><br><span class="line">    Camera.Size afterSize = afterParameters.getPreviewSize();</span><br><span class="line">    <span class="keyword">if</span> (afterSize != <span class="keyword">null</span> &amp;&amp; (bestPreviewSize.x != afterSize.width || bestPreviewSize.y != afterSize.height)) &#123;</span><br><span class="line">        Log.w(TAG, <span class="string">"Camera said it supported preview size "</span> + bestPreviewSize.x + <span class="string">'x'</span> + bestPreviewSize.y +</span><br><span class="line">                <span class="string">", but after setting it, preview size is "</span> + afterSize.width + <span class="string">'x'</span> + afterSize.height);</span><br><span class="line">        bestPreviewSize.x = afterSize.width;</span><br><span class="line">        bestPreviewSize.y = afterSize.height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实很明了了，这个方法是将获取到的那些参数整合成Parameters对象set到Camera里。<br>至此，我们大概说了两个问题，一个是如何获取并给相机设置参数，另一个是如何获取摄像头的预览数据并进行处理，接下来还有一个很重要的点需要说明，那就是我们虽然获取了整个预览帧的数据准备对其解析，但实际上，对于条码扫描来说，真正被处理的其实只是扫描框内的那部分图片或者说数据，所以我们在扫描的时候也必须将条码置于框框内，那么这就涉及到了两个部分，一个是在屏幕上绘制这样一个矩形框，另一个是在预览帧里提取框内的数据。这两点分别由以下方法实现。</p><h3 id="6-CameraManager-getFramingRect-方法"><a href="#6-CameraManager-getFramingRect-方法" class="headerlink" title="6.CameraManager.getFramingRect()方法"></a>6.CameraManager.getFramingRect()方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Calculates the framing rect which the UI should draw to show the user where to place the</span></span><br><span class="line"><span class="comment"> * barcode. This target helps with alignment as well as forces the user to hold the device</span></span><br><span class="line"><span class="comment"> * far enough away to ensure the image will be in focus.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> The rectangle to draw on screen in window coordinates.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Rect <span class="title">getFramingRect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (framingRect == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (camera == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Point screenResolution = configManager.getScreenResolution();</span><br><span class="line">        <span class="keyword">if</span> (screenResolution == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Called early, before init even finished</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> width = findDesiredDimensionInRange(screenResolution.x, MIN_FRAME_WIDTH, MAX_FRAME_WIDTH);</span><br><span class="line">        <span class="keyword">int</span> height = findDesiredDimensionInRange(screenResolution.y, MIN_FRAME_HEIGHT, MAX_FRAME_HEIGHT);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> leftOffset = (screenResolution.x - width) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> topOffset = (screenResolution.y - height) / <span class="number">2</span>;</span><br><span class="line">        framingRect = <span class="keyword">new</span> Rect(leftOffset, topOffset, leftOffset + width, topOffset + height);</span><br><span class="line">        Log.d(TAG, <span class="string">"Calculated framing rect: "</span> + framingRect);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> framingRect;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个是UI中的方框Rect对象的构造，很简单了，就是根据屏幕分辨率然后按照一个固定的比例来设置方框大小。这个方法在方框的自定义View绘制时调用。</p><h3 id="7-CameraManager-class的getFramingRectInPreview-方法"><a href="#7-CameraManager-class的getFramingRectInPreview-方法" class="headerlink" title="7.CameraManager.class的getFramingRectInPreview()方法"></a>7.CameraManager.class的getFramingRectInPreview()方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Like &#123;<span class="doctag">@link</span> #getFramingRect&#125; but coordinates are in terms of the preview frame,</span></span><br><span class="line"><span class="comment"> * not UI / screen.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> Rect&#125; expressing barcode scan area in terms of the preview size</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Rect <span class="title">getFramingRectInPreview</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (framingRectInPreview == <span class="keyword">null</span>) &#123;</span><br><span class="line">        Rect framingRect = getFramingRect();</span><br><span class="line">        <span class="keyword">if</span> (framingRect == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Rect rect = <span class="keyword">new</span> Rect(framingRect);</span><br><span class="line">        Point cameraResolution = configManager.getCameraResolution();</span><br><span class="line">        Point screenResolution = configManager.getScreenResolution();</span><br><span class="line">        <span class="keyword">if</span> (cameraResolution == <span class="keyword">null</span> || screenResolution == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Called early, before init even finished</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (screenResolution.x &lt; screenResolution.y) &#123;</span><br><span class="line">            <span class="comment">// portrait</span></span><br><span class="line">            rect.left = rect.left * cameraResolution.y / screenResolution.x;</span><br><span class="line">            rect.right = rect.right * cameraResolution.y / screenResolution.x;</span><br><span class="line">            rect.top = rect.top * cameraResolution.x / screenResolution.y;</span><br><span class="line">            rect.bottom = rect.bottom * cameraResolution.x / screenResolution.y;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// landscape</span></span><br><span class="line">            rect.left = rect.left * cameraResolution.x / screenResolution.x;</span><br><span class="line">            rect.right = rect.right * cameraResolution.x / screenResolution.x;</span><br><span class="line">            rect.top = rect.top * cameraResolution.y / screenResolution.y;</span><br><span class="line">            rect.bottom = rect.bottom * cameraResolution.y / screenResolution.y;</span><br><span class="line">        &#125;</span><br><span class="line">        framingRectInPreview = rect;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> framingRectInPreview;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个是预览帧方框Rect对象的构造，其实也很简单，就是因为相机卢兰帧分辨率和屏幕显示分辨率可能不一致，因此首先计算这两者的比例，然后再按比例对步骤6中的UI方框进行缩放，同样，计算比例的时候要区分横竖屏。这个方法是在buildLuminanceSource()中调用的，也就是步骤1中的构造PlanarYUVLuminanceSource对象时，其实还传入了这一Rect对象，来代表有效数据。</p><p>看完是不是有点点乱，因为本文没有系统的讲解，只是将所涉及内容的一些关键点比如Android Camera的使用，以及相应的横竖屏的区别处理做了介绍，真正核心的条码解码算法并没有深入，“浅尝辄止”了，就酱紫吧，有什么问题欢迎大家讨论。</p><p>另，转载请注明出处！文中若有什么错误希望大家探讨指正！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;二维码扫描最近两年简直是风靡移动互联网时代，尤其在国内发展神速。围绕条码扫码功能，首先说说通过本文你可以知道啥。一，如何在你的APP中快速集成一维码、二维码扫描功能；二，大概了解条码扫描功能的实现原理以及理解各个模块的代码。但是，本文不包含条码的编解码原理，如有兴趣，请自行查阅。&lt;/p&gt;
&lt;h2 id=&quot;条码扫描功能的快速集成&quot;&gt;&lt;a href=&quot;#条码扫描功能的快速集成&quot; class=&quot;headerlink&quot; title=&quot;条码扫描功能的快速集成&quot;&gt;&lt;/a&gt;条码扫描功能的快速集成&lt;/h2&gt;&lt;p&gt;默认你使用了Android Stuidio进行开发，直接使用这个开源项目&lt;a href=&quot;https://github.com/GuoJinyu/SimpleZXing&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SimpleZXing&lt;/a&gt;,它是在ZXing库的作者为Android写的条码扫描APP Barcode Scanner的基础上优化而成的。&lt;br&gt;你可以通过简单的两步就可以实现条码扫描的功能。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.添加项目依赖  &lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;com.acker:simplezxing:1.5&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;2.在你想调起条码扫描界面的地方(比如YourActivity)，调起二维码扫描界面CaptureActivity  &lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;startActivityForResult(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Intent(YourActivity.&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, CaptureActivity.class), CaptureActivity.REQ_CODE)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术" scheme="http://guojinyu.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://guojinyu.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>银行POS交易流程及概念浅析</title>
    <link href="http://guojinyu.com/2016/09/18/%E9%93%B6%E8%A1%8CPOS%E4%BA%A4%E6%98%93%E6%B5%81%E7%A8%8B%E5%8F%8A%E6%A6%82%E5%BF%B5%E6%B5%85%E6%9E%90/"/>
    <id>http://guojinyu.com/2016/09/18/银行POS交易流程及概念浅析/</id>
    <published>2016-09-18T10:58:00.000Z</published>
    <updated>2018-06-02T15:56:11.515Z</updated>
    
    <content type="html"><![CDATA[<p>银行的交易体系是一套比较复杂的系统，本文将就POS机交易涉及到的一些概念、流程等作简要介绍。</p><h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><p>首先，解释一下我们在日常生活或者POS等支付系统开发时经常遇到的一些名词的基本概念。</p><ul><li><p>1.签到<br>签到基本上是所有POS机必须支持的一项功能，并且POS机应该在每天的使用之前进行签到操作，其目的有两个：一是保证操作员及POS机的合法性（一般签到需要输入操作员号和对应的密码，也有自动签到的模式不需要手动输入这些信息）；二是下载新的工作密钥。那么什么是工作密钥呢？</p></li><li><p>2.工作密钥<br>工作密钥是专门用来在交易过程中对刷卡人的卡密码进行加密的，它是在签到的时候从后台获取的，那么为了保证工作密钥的安全性，在网络传输中POS机得到的工作密钥是密文的形式，获得后需要用POS机的主密钥来解密获得真实的工作密钥明文。那么主密钥又是怎么来的呢？</p></li><li><p>3.主密钥<br>主密钥可以通过安全环境下手工输入或者由密钥母POS灌入等方式来存入到POS机，主要作用便是对工作密钥和MAC密钥等进行解密。</p></li><li><p>4.MAC密钥<br>与工作密钥类似，MAC密钥也是签到时从后台获取，并且用主密钥解密，主要作用是计算MAC（数据包校验值），该校验值附加在交易报文里进行传输，收端同样计算一个MAC值，通过比较两个MAC值来确定报文是否被篡改。</p></li><li><p>5.消费<br>消费即刷卡消费，不解释</p></li><li><p>6.消费撤销<br>故名思意，即因为某种原因已经进行过消费的一笔交易，请求撤销。需要注意的是，消费撤销必须是撤销消费所用POS机的当日当批次的消费交易。</p></li></ul><a id="more"></a><ul><li><p>7.退货<br>和消费撤销类似，退货也是对一笔消费交易进行退款，不同的是，一，退货不要求当日当批次的消费；二，退货一般支持部分退货，多次退货，而消费撤销一般都是直接退全款。想要理解消费撤销和退货的本质区别，那么必须首先知道什么是结算。</p></li><li><p>8.结算<br>一般POS机在每天的工作结束之后，应进行结算操作（分为手动结算和自动结算），结算会将当日POS机中存储的所有笔交易（包含消费、消费撤销）上传至后台并清空，然后进行签退。一个结算周期内所有的交易使用的是同一个批次号，即同一批次。因此可以简单的理解为结算之前只能消费撤销，因为消费数据在POS机里面存着；结算之后只能退货，此时原消费数据已从POS机里面清除。</p></li><li><p>9.冲正<br>当POS机终端将一笔交易的报文发往后台，但是没有收到返回最终超时时，POS机无法确定后台是否成功的完成了这笔交易。因此，当下笔交易发生前，POS机会先向后台请求撤销该笔不确定的交易，如果后台记录该笔交易成功，则回滚及撤销该笔交易，否则不处理，此为冲正成功；如果POS机与银联结算中间在数据传输过程中发生故障，则冲正不成功，此时刷卡方卡里的钱已经被扣，需要进行人工冲正。</p></li><li><p>10.补登<br>补登指支付应用将交易结果发送给POS机后并没有收到POS机的应答，因此不确定POS机端是否成功记录了该笔交易，此时支付应用应进行的自动或手动的POS端交易查询。</p></li><li><p>11.预授权相关<br>包含预授权，预授权追加，预授权完成，预授权撤销，预授权撤销完成。预授权类似于押金，即先冻结一部分用户银行卡的资金，等消费正式完成之后再扣取实际的金额即预授权完成。不难想象，预授权业务多用于酒店。</p></li></ul><p>此外，<a href="https://www.zhihu.com/question/29519161/answer/45062087#" target="_blank" rel="noopener">POS机签购单上对应的一些字段术语</a>，如下所示：</p><blockquote><p>批次号(Batch NO.)：POS从签到起至结算、签退为止的交易为一批次，交易批次号标识一批交易。POS中心为每个POS的每个批次分配一个批次号，在签到响应报文中下传给POS终端。对应银联ISO8583报文的报文头域7：批次号(Batch Number) </p></blockquote><blockquote><p>序号(Ref. NO.)：POS中心为交易分配的流水号，在响应报文中下传给POS终端作为对账参考号，并用于事后查证。对应银联ISO8583报文的域37：检索参考号（Retrieval Reference Number）</p></blockquote><blockquote><p>授权号(Auth Code)：授权标识应答码，简称“授权码”。是发卡行返回或银联CUPS代授权时返回的授权序号。对应银联ISO8583报文的域38：授权标识应答码 Authorization Identification Response</p></blockquote><blockquote><p>查询号(Trace NO.)：POS机为每一笔交易产生的顺序编号。POS每上送一次交易此号码增加1。 POS流水号为6位数字，值从1至999999循环使用。在自动冲正时，POS中心依据POS流水号作为确定被冲正交易的要素之一。</p></blockquote><blockquote><p>凭证号(Voucher NO.)：查询号(Trace NO. 也叫POS流水号)也作为交易凭证号（在签购单上打印为Voucher NO.），在进行撤销等交易时，输入原交易凭证号作为确定原交易的要素之一，并且必须上送原交易的凭证号。</p></blockquote><h2 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h2><p>下图所示为一般的包含POS支付APP，POS终端，后台的交易流程示意图，所有的交易类型如消费、消费撤销、退货等都是这样一套流程。图中JAR是JAVA语言单独封装出来的一层，相当于APP、POS终端、后台服务器三者的媒介。当然，其他语言原理一样。</p><p><center><br><img src="http://obc3atr48.bkt.clouddn.com/pos%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="POS交易流程图"><br></center><br>参考上图，具体步骤为：</p><ol><li>APP通过用户界面发起一项交易（消费、消费撤销、退货等）；</li><li>JAR包收到交易指令后通知POS终端（二者通过串口或蓝牙进行通讯），显示交易指令并提示刷卡；</li><li>持卡人刷卡输入密码确认后，POS终端将交易请求数据打包发送给JAR包；</li><li>JAR包将交易请求数据通过互联网发送给后台；</li><li>后台处理完毕后将处理结果返回给JAR包；</li><li>JAR包将这一结果再次透传返回给POS终端，这一步POS终端如果接收超时，则下次交易发起时会进行自动冲正；</li><li>POS机记录交易结果，并向JAR包应答，这一步JAR包如果接收超时，则需提示APP进行补登操作；</li><li>JAR包将交易结果最终返回给APP。</li></ol><p>另外，文中所出现的后台指的是收单机构的后台，收单机构又是和银联的后台对接的，那么这里需要详细解释一下。这个时候我们需要引入<strong>清算</strong>这个概念以及著名的<strong>721</strong>比例。</p><p>在一次普通的POS机交易中，可能涉及到四家机构，一是刷卡人的发卡行，二是为POS机拓展商户的收单机构（当然，POS机可能又是另外一家专门的POS机厂商生产的），三是商户账户对应的银行，四是银联。银联的清算中心作为一个桥梁，每天会对所有收单机构的交易进行清算，清算前，顾客刷卡消费的金额虽然已经从其银行卡上扣掉了，但实际上还是在该银行内部，通过银联的清算，这笔金额会通过银联到达收单机构的账户，收单机构又会再次通过银联将这笔钱转到商户所使用的银行账户上。上述的过程钱不是白转的，一般POS刷卡消费对于商户会有一定比例的手续费，如千分之六，那么这个手续费会按照<strong>持卡人发卡行：收单机构：银联=7：2：1</strong>的比例来进行分成。当然需要注意的是，收单机构既包括一些银行，也包括一些有收单支付牌照的第三方机构，当收单机构和持卡人的银行卡同属一家银行的时候，是不需要经过银联的，因此该银行可以通吃商户手续费。</p><p>需要说明的是，银行交易系统流程复杂，POS机应用模式也是多种多样，因此本文所讲内容可能只是冰山一角，不准确的地方还望大家批评指正。</p><p>转载请注明出处！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;银行的交易体系是一套比较复杂的系统，本文将就POS机交易涉及到的一些概念、流程等作简要介绍。&lt;/p&gt;
&lt;h2 id=&quot;名词解释&quot;&gt;&lt;a href=&quot;#名词解释&quot; class=&quot;headerlink&quot; title=&quot;名词解释&quot;&gt;&lt;/a&gt;名词解释&lt;/h2&gt;&lt;p&gt;首先，解释一下我们在日常生活或者POS等支付系统开发时经常遇到的一些名词的基本概念。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1.签到&lt;br&gt;签到基本上是所有POS机必须支持的一项功能，并且POS机应该在每天的使用之前进行签到操作，其目的有两个：一是保证操作员及POS机的合法性（一般签到需要输入操作员号和对应的密码，也有自动签到的模式不需要手动输入这些信息）；二是下载新的工作密钥。那么什么是工作密钥呢？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2.工作密钥&lt;br&gt;工作密钥是专门用来在交易过程中对刷卡人的卡密码进行加密的，它是在签到的时候从后台获取的，那么为了保证工作密钥的安全性，在网络传输中POS机得到的工作密钥是密文的形式，获得后需要用POS机的主密钥来解密获得真实的工作密钥明文。那么主密钥又是怎么来的呢？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;3.主密钥&lt;br&gt;主密钥可以通过安全环境下手工输入或者由密钥母POS灌入等方式来存入到POS机，主要作用便是对工作密钥和MAC密钥等进行解密。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;4.MAC密钥&lt;br&gt;与工作密钥类似，MAC密钥也是签到时从后台获取，并且用主密钥解密，主要作用是计算MAC（数据包校验值），该校验值附加在交易报文里进行传输，收端同样计算一个MAC值，通过比较两个MAC值来确定报文是否被篡改。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;5.消费&lt;br&gt;消费即刷卡消费，不解释&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;6.消费撤销&lt;br&gt;故名思意，即因为某种原因已经进行过消费的一笔交易，请求撤销。需要注意的是，消费撤销必须是撤销消费所用POS机的当日当批次的消费交易。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术" scheme="http://guojinyu.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="业务" scheme="http://guojinyu.com/tags/%E4%B8%9A%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Android使用Builder模式自定义Dialog</title>
    <link href="http://guojinyu.com/2016/08/03/Android%E4%BD%BF%E7%94%A8Builder%E6%A8%A1%E5%BC%8F%E8%87%AA%E5%AE%9A%E4%B9%89Dialog/"/>
    <id>http://guojinyu.com/2016/08/03/Android使用Builder模式自定义Dialog/</id>
    <published>2016-08-03T13:30:00.000Z</published>
    <updated>2018-06-02T15:56:11.510Z</updated>
    
    <content type="html"><![CDATA[<p>首先说说为啥要自定义Dialog，在任何软件操作系统中，Dialog即对话框都是一种重要的交互模式与信息载体，而Android系统本身的Dialog拥有固定的样式，并且在5.0后采用Material Design设计风格的Dialog美观大气。但是我们开发人员在实际项目过程中遇到的需求是多种多样的，有时我们要匹配APP自己的设计风格，有时我们会觉得系统的对话框使用起来不够自由，因此自己定义一个适合自己的Dialog是很有必要的。</p><p>然后为什么要用Builder模式呢，Builder设计模式是一步步创建一个复杂对象的创建型模式，它允许用户在不知道内部构建细节的情况下，可以更精细地控制对象的构造流程。它的优点就在于将对象的构建和表示分离从而解耦。我们都知道Android系统自身的对话框如AlertDialog就采用了Builder模式，因此可见Builder模式很适合用来构建Dialog对象。</p><p>好，废话少说，上代码。</p><ul><li><strong>BaseDialog.java</strong></li></ul><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.acker.android.dialog;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Dialog;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.text.TextUtils;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.FrameLayout;</span><br><span class="line"><span class="keyword">import</span> android.widget.LinearLayout;</span><br><span class="line"><span class="keyword">import</span> android.widget.ProgressBar;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义Dialog基类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> guojinyu</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseDialog</span> <span class="keyword">extends</span> <span class="title">Dialog</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextView tvTitle;</span><br><span class="line">    <span class="keyword">private</span> TextView tvMsg;</span><br><span class="line">    <span class="keyword">private</span> ProgressBar pbLoading;</span><br><span class="line">    <span class="keyword">private</span> Button btnPositive;</span><br><span class="line">    <span class="keyword">private</span> Button btnNegative;</span><br><span class="line">    <span class="keyword">private</span> FrameLayout flCustom;</span><br><span class="line">    <span class="keyword">private</span> View.OnClickListener onDefaultClickListener = <span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">            cancel();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">private</span> View.OnClickListener onPositiveListener = onDefaultClickListener;</span><br><span class="line">    <span class="keyword">private</span> View.OnClickListener onNegativeListener = onDefaultClickListener;</span><br><span class="line">    <span class="keyword">private</span> String mTitle;</span><br><span class="line">    <span class="keyword">private</span> String mMessage;</span><br><span class="line">    <span class="keyword">private</span> String positiveText;</span><br><span class="line">    <span class="keyword">private</span> String negativeText;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isProgressBarShow = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isNegativeBtnShow = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> View mView;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">BaseDialog</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, R.style.MyDialog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.dialog_base);</span><br><span class="line">        flCustom = (FrameLayout) findViewById(R.id.fl_dialog_content);</span><br><span class="line">        tvTitle = (TextView) findViewById(R.id.tv_title);</span><br><span class="line">        pbLoading = (ProgressBar) findViewById(R.id.pb_loading);</span><br><span class="line">        tvMsg = (TextView) findViewById(R.id.tv_msg);</span><br><span class="line">        btnPositive = (Button) findViewById(R.id.btn_positive);</span><br><span class="line">        btnNegative = (Button) findViewById(R.id.btn_negative);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用完Builder类的create()方法后显示该对话框的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.show();</span><br><span class="line">        show(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(BaseDialog mDialog)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!TextUtils.isEmpty(mDialog.mTitle)) &#123;</span><br><span class="line">            mDialog.tvTitle.setText(mDialog.mTitle);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mDialog.mView != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mDialog.flCustom.addView(mDialog.mView);</span><br><span class="line">            mDialog.pbLoading.setVisibility(View.GONE);</span><br><span class="line">            mDialog.tvMsg.setVisibility(View.GONE);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!TextUtils.isEmpty(mDialog.mMessage)) &#123;</span><br><span class="line">                mDialog.tvMsg.setText(mDialog.mMessage);</span><br><span class="line">                mDialog.tvMsg.setVisibility(View.VISIBLE);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (isProgressBarShow) &#123;</span><br><span class="line">                mDialog.pbLoading.setVisibility(View.VISIBLE);</span><br><span class="line">                mDialog.btnPositive.setVisibility(View.GONE);</span><br><span class="line">                mDialog.btnNegative.setVisibility(View.GONE);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!mDialog.isNegativeBtnShow) &#123;</span><br><span class="line">            mDialog.btnNegative.setVisibility(View.GONE);</span><br><span class="line">            LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams) mDialog.btnPositive</span><br><span class="line">                    .getLayoutParams();</span><br><span class="line">            layoutParams.setMargins(<span class="number">150</span>, layoutParams.topMargin, <span class="number">150</span>, layoutParams.bottomMargin);</span><br><span class="line">            mDialog.btnPositive.setLayoutParams(layoutParams);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mDialog.btnNegative.setOnClickListener(mDialog.onNegativeListener);</span><br><span class="line">            <span class="keyword">if</span> (!TextUtils.isEmpty(mDialog.negativeText)) &#123;</span><br><span class="line">                mDialog.btnNegative.setText(mDialog.negativeText);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mDialog.btnPositive.setOnClickListener(mDialog.onPositiveListener);</span><br><span class="line">        <span class="keyword">if</span> (!TextUtils.isEmpty(mDialog.positiveText)) &#123;</span><br><span class="line">            mDialog.btnPositive.setText(mDialog.positiveText);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> BaseDialog mDialog;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">            mDialog = <span class="keyword">new</span> BaseDialog(context);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 设置对话框标题</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> title</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setTitle</span><span class="params">(String title)</span> </span>&#123;</span><br><span class="line">            mDialog.mTitle = title;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 设置对话框文本内容,如果调用了setView()方法，该项失效</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setMessage</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">            mDialog.mMessage = msg;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 设置确认按钮的回调</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> onClickListener</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setPositiveButton</span><span class="params">(View.OnClickListener onClickListener)</span> </span>&#123;</span><br><span class="line">            mDialog.onPositiveListener = onClickListener;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 设置确认按钮的回调</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> btnText,onClickListener</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setPositiveButton</span><span class="params">(String btnText, View.OnClickListener onClickListener)</span> </span>&#123;</span><br><span class="line">            mDialog.positiveText = btnText;</span><br><span class="line">            mDialog.onPositiveListener = onClickListener;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 设置取消按钮的回掉</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> onClickListener</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setNegativeButton</span><span class="params">(View.OnClickListener onClickListener)</span> </span>&#123;</span><br><span class="line">            mDialog.onNegativeListener = onClickListener;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 设置取消按钮的回调</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> btnText,onClickListener</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setNegativeButton</span><span class="params">(String btnText, View.OnClickListener onClickListener)</span> </span>&#123;</span><br><span class="line">            mDialog.negativeText = btnText;</span><br><span class="line">            mDialog.onNegativeListener = onClickListener;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 设置手否显示ProgressBar，默认不显示</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> isProgressBarShow</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setProgressBarShow</span><span class="params">(<span class="keyword">boolean</span> isProgressBarShow)</span> </span>&#123;</span><br><span class="line">            mDialog.isProgressBarShow = isProgressBarShow;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 设置是否显示取消按钮，默认显示</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> isNegativeBtnShow</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setNegativeBtnShow</span><span class="params">(<span class="keyword">boolean</span> isNegativeBtnShow)</span> </span>&#123;</span><br><span class="line">            mDialog.isNegativeBtnShow = isNegativeBtnShow;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 设置自定义内容View</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> view</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setView</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">            mDialog.mView = view;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 设置该对话框能否被Cancel掉，默认可以</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> cancelable</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setCancelable</span><span class="params">(<span class="keyword">boolean</span> cancelable)</span> </span>&#123;</span><br><span class="line">            mDialog.setCancelable(cancelable);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 设置对话框被cancel对应的回调接口，cancel()方法被调用时才会回调该接口</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> onCancelListener</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setOnCancelListener</span><span class="params">(OnCancelListener onCancelListener)</span> </span>&#123;</span><br><span class="line">            mDialog.setOnCancelListener(onCancelListener);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 设置对话框消失对应的回调接口，一切对话框消失都会回调该接口</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> onDismissListener</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setOnDismissListener</span><span class="params">(OnDismissListener onDismissListener)</span> </span>&#123;</span><br><span class="line">            mDialog.setOnDismissListener(onDismissListener);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 通过Builder类设置完属性后构造对话框的方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> BaseDialog <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> mDialog;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码很简单，BaseDialog类内定义一些对话框要显示的控件和这些控件对应的一些属性，以及最终将所有属性填入到控件的方法show()。Builder类是BaseDialog的一个内部类，其中定义了BaseDialog类的所有属性的set方法以及装配完毕后的create()方法。</p><ul><li>对应的自定义Dialog的布局文件 <strong>dialog_base.xml</strong>如下：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_marginLeft</span>=<span class="string">"20dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_marginRight</span>=<span class="string">"20dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">"@drawable/bg_base_dialog"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/tv_title"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginBottom</span>=<span class="string">"10dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"10dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">"@android:color/black"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">"18sp"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"1dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"@android:color/black"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"20dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginRight</span>=<span class="string">"20dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">ProgressBar</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/pb_loading"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginBottom</span>=<span class="string">"20dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginRight</span>=<span class="string">"20dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginTop</span>=<span class="string">"20dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:visibility</span>=<span class="string">"gone"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/tv_msg"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginBottom</span>=<span class="string">"20dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginTop</span>=<span class="string">"20dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textColor</span>=<span class="string">"@android:color/black"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">"18sp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:visibility</span>=<span class="string">"gone"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">FrameLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/fl_dialog_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</span><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/btn_negative"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"40dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginBottom</span>=<span class="string">"20dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginLeft</span>=<span class="string">"20dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginRight</span>=<span class="string">"20dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">"@drawable/bg_dialog_btn_negative"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"取消"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textColor</span>=<span class="string">"@android:color/white"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">"18sp"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/btn_positive"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"40dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginBottom</span>=<span class="string">"20dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginLeft</span>=<span class="string">"20dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginRight</span>=<span class="string">"20dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">"@drawable/bg_dialog_btn_positive"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"确定"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textColor</span>=<span class="string">"@android:color/white"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">"18sp"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>涉及到的其他资源文件如下：</p><ul><li>对话框样式 <strong>styles.xml</strong></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 全局Dialog样式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"MyDialog"</span> <span class="attr">parent</span>=<span class="string">"@android:style/Theme.Dialog"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowBackground"</span>&gt;</span>@android:color/transparent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowFrame"</span>&gt;</span>@null<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowNoTitle"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowIsFloating"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowIsTranslucent"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:background"</span>&gt;</span>@android:color/transparent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:backgroundDimEnabled"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过设置这些属性可以保证对话框背景透明无黑边。</p><ul><li>确定取消按钮的颜色值 <strong>colors.xml</strong></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"btn_dialog_negative_normal"</span>&gt;</span>#ff0000<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"btn_dialog_negative_pressed"</span>&gt;</span>#bf0000<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"btn_dialog_positive_normal"</span>&gt;</span>#368bff<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"btn_dialog_positive_pressed"</span>&gt;</span>#0067f3<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>对话框背景 <strong>bg_base_dialog.xml</strong></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">shape</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:shape</span>=<span class="string">"rectangle"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">"4dp"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"@android:color/white"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">stroke</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:width</span>=<span class="string">"1dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:color</span>=<span class="string">"#e5e7ea"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br></pre></td></tr></table></figure><p>包含背景、圆角、阴影效果。</p><ul><li>确定按钮背景 <strong>bg_dialog_btn_positive.xml</strong></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@color/btn_dialog_positive_normal"</span> <span class="attr">android:state_pressed</span>=<span class="string">"false"</span>&gt;</span><span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@color/btn_dialog_positive_pressed"</span> <span class="attr">android:state_pressed</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span></span><br></pre></td></tr></table></figure><p>包含正常和按下的效果。</p><ul><li>取消按钮背景 <strong>bg_dialog_btn_negative.xml</strong></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@color/btn_dialog_negative_normal"</span> <span class="attr">android:state_pressed</span>=<span class="string">"false"</span>&gt;</span><span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@color/btn_dialog_negative_pressed"</span> <span class="attr">android:state_pressed</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span></span><br></pre></td></tr></table></figure><p>包含正常和按下的效果。</p><p>以上就是整个自定义Dialog的所有内容，接下来我们通过一个简单的Demo来演示如何使用它。</p><ul><li><strong>MainActivity.java</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.acker.android.dialog;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.DialogInterface;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    BaseDialog dialog;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        dialog = <span class="keyword">new</span> BaseDialog.Builder(<span class="keyword">this</span>).setTitle(<span class="string">"标题"</span>).setMessage(<span class="string">"内容"</span>)</span><br><span class="line">                .setPositiveButton(<span class="string">"哈哈"</span>, <span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                        dialog.dismiss();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).setOnCancelListener(<span class="keyword">new</span> DialogInterface.OnCancelListener() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCancel</span><span class="params">(DialogInterface dialogInterface)</span> </span>&#123;</span><br><span class="line">                        Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"cancel"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).setOnDismissListener(<span class="keyword">new</span> DialogInterface.OnDismissListener() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDismiss</span><span class="params">(DialogInterface dialogInterface)</span> </span>&#123;</span><br><span class="line">                        Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"dismiss"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).create();</span><br><span class="line">        dialog.show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来看下效果图：</p><p><center><br><img src="http://obc3atr48.bkt.clouddn.com/245941188562351983.png" alt="自定义对话框效果图1"><br></center><br>很丑有木有，不过没关系，这里我们只是展示它的用法，如何把对话框做的好看一点就看各位的发挥了。可以看出自定义的BaseDialog的使用方法与Andorid自身的AlertDialog基本一致，都是通过其Builder类进行对象的构建。</p><p>该自定义对话框还支持显示ProgressBar以及自定义内容填充的功能。</p><ul><li>显示ProgressBar且触摸屏幕不可取消：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.setProgressBarShow(<span class="keyword">true</span>)</span><br><span class="line">.setCancelable(<span class="keyword">false</span>)</span><br></pre></td></tr></table></figure><p>效果图如下：</p><p><center><br><img src="http://obc3atr48.bkt.clouddn.com/360263159663942597.png" alt="自定义对话框效果图2"><br></center></p><ul><li>自定义内容区域且不显示取消按钮：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">View view = getLayoutInflater().inflate(R.layout.dialog_input_amount, <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">final</span> EditText amountEdit = (EditText) view.findViewById(R.id.dialog_et_amount);</span><br><span class="line">amountEdit.setText(<span class="string">"123456789"</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.setView(view)</span><br><span class="line">.setNegativeBtnShow(<span class="keyword">false</span>)</span><br></pre></td></tr></table></figure><ul><li>其对应的布局文件为 <strong>dialog_input_amount.xml</strong>：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span> &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/dialog_et_amount"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"40dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginBottom</span>=<span class="string">"20dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"20dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginRight</span>=<span class="string">"20dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"20dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">"center_vertical"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:paddingLeft</span>=<span class="string">"10dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:paddingRight</span>=<span class="string">"10dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:inputType</span>=<span class="string">"numberDecimal"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:singleLine</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">"18sp"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">EditText</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果图如下：</p><p><center><br><img src="http://obc3atr48.bkt.clouddn.com/704131486458469105.png" alt="自定义对话框效果图3"><br></center><br>综上，可以看出通过Builder模式自定义Dialog既可以维持原有Android对话框的使用方法，同时使用方便，自由度更高，大家完全可以按照各自的需求来对代码作出相应的修改。需要说明的是本文并没有严格按照传统的Builder设计模式来实现对话框，而是做了一些简化以更适合于我们的场景。</p><p>文中所有代码可以在<a href="https://github.com/GuoJinyu/AndroidUtils/tree/master/dialog" target="_blank" rel="noopener">个人github主页</a>查看和下载。</p><p>另，转载请注明出处！文中若有什么错误希望大家探讨指正！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先说说为啥要自定义Dialog，在任何软件操作系统中，Dialog即对话框都是一种重要的交互模式与信息载体，而Android系统本身的Dialog拥有固定的样式，并且在5.0后采用Material Design设计风格的Dialog美观大气。但是我们开发人员在实际项目过程中遇到的需求是多种多样的，有时我们要匹配APP自己的设计风格，有时我们会觉得系统的对话框使用起来不够自由，因此自己定义一个适合自己的Dialog是很有必要的。&lt;/p&gt;
&lt;p&gt;然后为什么要用Builder模式呢，Builder设计模式是一步步创建一个复杂对象的创建型模式，它允许用户在不知道内部构建细节的情况下，可以更精细地控制对象的构造流程。它的优点就在于将对象的构建和表示分离从而解耦。我们都知道Android系统自身的对话框如AlertDialog就采用了Builder模式，因此可见Builder模式很适合用来构建Dialog对象。&lt;/p&gt;
&lt;p&gt;好，废话少说，上代码。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;BaseDialog.java&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术" scheme="http://guojinyu.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://guojinyu.com/tags/Android/"/>
    
      <category term="设计模式" scheme="http://guojinyu.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Android获取设备IP地址代码与分析</title>
    <link href="http://guojinyu.com/2016/07/26/Android%E8%8E%B7%E5%8F%96%E8%AE%BE%E5%A4%87IP%E5%9C%B0%E5%9D%80%E4%BB%A3%E7%A0%81%E4%B8%8E%E5%88%86%E6%9E%90/"/>
    <id>http://guojinyu.com/2016/07/26/Android获取设备IP地址代码与分析/</id>
    <published>2016-07-26T11:00:00.000Z</published>
    <updated>2018-06-02T15:56:11.513Z</updated>
    
    <content type="html"><![CDATA[<p>一直以来，好像没有一段标准的代码能提供Android设备此刻的IP地址，究其原因，Android设备的网卡可能不只一个，如蜂窝网卡、WiFi网卡，而且同一个网卡也可能拥有不止一个IP地址。基于此，一个Android终端很有可能同时拥有多个IP地址（不只是同时拥有IPv4和IPv6地址），比如开启热点共享蜂窝网络的时候，蜂窝网卡拥有一个IPv4地址来访问外网，WiFi网卡拥有一个IPv4地址来作为内网的网关。</p><p>网上比较流行的获取Android设备IP地址的代码有以下几种，下面我们来一一分析一下。</p><h2 id="1-不可行的方法"><a href="#1-不可行的方法" class="headerlink" title="1. 不可行的方法"></a>1. 不可行的方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String ipAddress = Inet4Address.getLocalHost().getHostAddress()</span><br></pre></td></tr></table></figure><p>这个是Java提供的API，在Android上执行需要以下权限（经测试Android版本6.0.1的一部机器不需要该权限，比较纳闷，求解答）<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>此外，由于该方法使用了网络通信，因此不能在UI线程执行。</p><p>该方法顾名思义是获取本地主机的IP地址，在某些Java平台上可以得到想要的结果，但是我截取了Android官方给出的关于该方法的部分说明如下：</p><blockquote><p>Returns an InetAddress for the local host if possible, or the loopback address otherwise. This method works by getting the hostname, performing a DNS lookup, and then taking the first returned address.<br>Note that if the host doesn’t have a hostname set – as Android devices typically don’t – this method will effectively return the loopback address, albeit by getting the name localhost and then doing a lookup to translate that to 127.0.0.1.</p></blockquote><a id="more"></a><p>可以看出，一般在Android平台上，由于网络通信设备没有设置hostname，因此无法进行DNS检索得到其相应的IP地址，因此该方法会返回本地回环地址，即127.0.0.1，也就是说这个方法在Android平台上无法达到我们一般的获取本机IP地址的目的，经过测试，结果也确实如此。</p><h2 id="2-部分可行的方法"><a href="#2-部分可行的方法" class="headerlink" title="2. 部分可行的方法"></a>2. 部分可行的方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WifiManager wm = (WifiManager) getSystemService(WIFI_SERVICE);</span><br><span class="line"><span class="keyword">int</span> ipAddressInt = wm.getConnectionInfo().getIpAddress();</span><br><span class="line">String ipAddress = String.format(Locale.getDefault(), <span class="string">"%d.%d.%d.%d"</span>, (ipAddressInt &amp; <span class="number">0xff</span>), (ipAddressInt &gt;&gt; <span class="number">8</span> &amp; <span class="number">0xff</span>), (ipAddressInt &gt;&gt; <span class="number">16</span> &amp; <span class="number">0xff</span>), (ipAddressInt &gt;&gt; <span class="number">24</span> &amp; <span class="number">0xff</span>));</span><br></pre></td></tr></table></figure><p>方法执行所需权限为：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_WIFI_STATE"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>需要说明的是，上述代码第二行返回的是一个int类型的值，如1795336384，它对应的十六进制值6b02a8c0每两位便对应IPv4地址的每一项（逆序，如c0转化为十进制为192）。</p><p>经测试，通过该方法可以获得当前WiFi网络中Android设备的IPv4地址，但是显然，该方法是通过WifiManager获取当前网络连接下的IP地址的，因此它只局限于使用WiFi网络的情况，当使用蜂窝等其他网络设备时，该方法无效，会返回0值。另外，如果你是通过比较hacker的方式比如没有通过系统Framework层打开WiFi，而是自己通过Linux命令创建的WiFi网络,那么像这种Framework层提供的API也是不起作用的。</p><h2 id="3-基本可行的方法"><a href="#3-基本可行的方法" class="headerlink" title="3. 基本可行的方法"></a>3. 基本可行的方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getIpAddressString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Enumeration&lt;NetworkInterface&gt; enNetI = NetworkInterface</span><br><span class="line">                .getNetworkInterfaces(); enNetI.hasMoreElements(); ) &#123;</span><br><span class="line">            NetworkInterface netI = enNetI.nextElement();</span><br><span class="line">            <span class="keyword">for</span> (Enumeration&lt;InetAddress&gt; enumIpAddr = netI</span><br><span class="line">                    .getInetAddresses(); enumIpAddr.hasMoreElements(); ) &#123;</span><br><span class="line">                InetAddress inetAddress = enumIpAddr.nextElement();</span><br><span class="line">                <span class="keyword">if</span> (inetAddress <span class="keyword">instanceof</span> Inet4Address &amp;&amp; !inetAddress.isLoopbackAddress()) &#123;</span><br><span class="line">                    <span class="keyword">return</span> inetAddress.getHostAddress();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法执行所需权限为：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>这段代码不难理解，其实就是双重循环获取终端中所有网络接口的所有IP地址，然后返回第一个遇到的非本地回环的IPv4地址。这种方式可以很好的覆盖我们一般的需求。根据Android系统的运行机制，当WiFi网络开启时蜂窝网络会自动关闭，因此遍历到的第一个地址是WiFi网卡的IP地址；同样，当关闭WiFi网络，打开蜂窝网络时，遍历到的第一个地址是蜂窝网卡的IP地址。</p><p>那么，为什么我叫这种方式为基本可行的方法呢，因为它返回的结果并不是百分百“正确”的，确切地说并不一定是开发人员想要的结果。比如当Android手机开启热点的时候，实际上是通过WiFi网卡共享其蜂窝网络，因此此时，WiFi网卡和蜂窝网卡分配了不同的IP地址，但由于蜂窝网卡对应的NetworkInterface对象出现的位置要先于WiFi网卡，因此该方法返回的实际上是蜂窝网卡的IP地址。如果想要始终获取WiFi网卡的IP地址可以在上述的两个循环间添加如下筛选代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (netI.getDisplayName().equals(<span class="string">"wlan0"</span>) || netI.getDisplayName().equals(<span class="string">"eth0"</span>))</span><br></pre></td></tr></table></figure></p><p>其中”wlan0”和”eth0”为常见的WLAN网卡的DisplayName名称，绝大部分为”wlan0”，比较老的机型可能会是”eth0”或其他。</p><p>这里只是举了一个简单的例子，其实还有很多特殊的情况，比如开启USB网络共享的情况、开启网络代理的情况、之前提到的Hacker手段同时打开蜂窝网络和WiFi网络（非WiFi热点）的情况等等，这些网络环境下都会存在多IP的情况，因此该方法不一定完全适用了。</p><p>正如文章开头所说，由于一个Android设备同一时刻可能不只有一个IP地址，因此可以说没有任何一段通用的代码能获取每个人心中想要获取的IP地址，重要的还是根据自己具体的需求来进行相应的代码修改，通过对获取的IP地址列表进行筛选来得到想要的结果。</p><p>本文的讨论是围绕IPv4地址的，如果想要获取IPv6地址，Android API也提供了相应的类或方法，只需要在上述代码的基础上作出微小修改即可。</p><p>最后附上在<a href="http://stackoverflow.com/questions/9481865/getting-the-ip-address-of-the-current-machine-using-java?noredirect=1&amp;lq=1" target="_blank" rel="noopener">StackOverFlow</a>上看到的关于IP地址筛选的总结，供大家参考。</p><blockquote><ul><li>Any address in the range 127.xxx.xxx.xxx is a “loopback” address. It is only visible to “this” host.</li><li>Any address in the range 192.168.xxx.xxx is a private (aka site local) IP address. These are reserved for use within an organization. The same applies to 10.xxx.xxx.xxx addresses, and 172.16.xxx.xxx through 172.31.xxx.xxx.</li><li>Addresses in the range 169.254.xxx.xxx are link local IP addresses. These are reserved for use on a single network segment.</li><li>Addresses in the range 224.xxx.xxx.xxx through 239.xxx.xxx.xxx are multicast addresses.</li><li>The address 255.255.255.255 is the broadcast address.</li><li>Anything else should be a valid public point-to-point IPv4 address.</li></ul></blockquote><p>文中所有代码可以在<a href="https://github.com/GuoJinyu/AndroidUtils/tree/master" target="_blank" rel="noopener">个人github主页</a>查看和下载。</p><p>另，转载请注明出处！文中若有什么错误希望大家探讨指正！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直以来，好像没有一段标准的代码能提供Android设备此刻的IP地址，究其原因，Android设备的网卡可能不只一个，如蜂窝网卡、WiFi网卡，而且同一个网卡也可能拥有不止一个IP地址。基于此，一个Android终端很有可能同时拥有多个IP地址（不只是同时拥有IPv4和IPv6地址），比如开启热点共享蜂窝网络的时候，蜂窝网卡拥有一个IPv4地址来访问外网，WiFi网卡拥有一个IPv4地址来作为内网的网关。&lt;/p&gt;
&lt;p&gt;网上比较流行的获取Android设备IP地址的代码有以下几种，下面我们来一一分析一下。&lt;/p&gt;
&lt;h2 id=&quot;1-不可行的方法&quot;&gt;&lt;a href=&quot;#1-不可行的方法&quot; class=&quot;headerlink&quot; title=&quot;1. 不可行的方法&quot;&gt;&lt;/a&gt;1. 不可行的方法&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;String ipAddress = Inet4Address.getLocalHost().getHostAddress()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个是Java提供的API，在Android上执行需要以下权限（经测试Android版本6.0.1的一部机器不需要该权限，比较纳闷，求解答）&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;uses-permission&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;android.permission.INTERNET&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;此外，由于该方法使用了网络通信，因此不能在UI线程执行。&lt;/p&gt;
&lt;p&gt;该方法顾名思义是获取本地主机的IP地址，在某些Java平台上可以得到想要的结果，但是我截取了Android官方给出的关于该方法的部分说明如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Returns an InetAddress for the local host if possible, or the loopback address otherwise. This method works by getting the hostname, performing a DNS lookup, and then taking the first returned address.&lt;br&gt;Note that if the host doesn’t have a hostname set – as Android devices typically don’t – this method will effectively return the loopback address, albeit by getting the name localhost and then doing a lookup to translate that to 127.0.0.1.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="技术" scheme="http://guojinyu.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://guojinyu.com/tags/Java/"/>
    
      <category term="Android" scheme="http://guojinyu.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Java中String和byte[]间的转换浅析</title>
    <link href="http://guojinyu.com/2016/06/21/Java%E4%B8%ADString%E5%92%8Cbyte%5B%5D%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2%E6%B5%85%E6%9E%90/"/>
    <id>http://guojinyu.com/2016/06/21/Java中String和byte[]间的转换浅析/</id>
    <published>2016-06-21T06:00:00.000Z</published>
    <updated>2018-06-02T15:56:11.514Z</updated>
    
    <content type="html"><![CDATA[<p>Java语言中字符串类型和字节数组类型相互之间的转换经常发生，网上的分析及代码也比较多，本文将分析总结常规的byte[]和String间的转换以及十六进制String和byte[]间相互转换的原理及实现。</p><h2 id="1-String转byte"><a href="#1-String转byte" class="headerlink" title="1. String转byte[]"></a>1. String转byte[]</h2><p>首先我们来分析一下常规的String转byte[]的方法，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] strToByteArray(String str) &#123;</span><br><span class="line">    <span class="keyword">if</span> (str == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">byte</span>[] byteArray = str.getBytes();</span><br><span class="line">    <span class="keyword">return</span> byteArray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>很简单，就是调用String类的getBytes()方法。看JDK源码可以发现该方法最终调用了String类如下的方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* JDK source code */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] getBytes(Charset charset) &#123;</span><br><span class="line">    String canonicalCharsetName = charset.name();</span><br><span class="line">    <span class="keyword">if</span> (canonicalCharsetName.equals(<span class="string">"UTF-8"</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> Charsets.toUtf8Bytes(value, offset, count);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (canonicalCharsetName.equals(<span class="string">"ISO-8859-1"</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> Charsets.toIsoLatin1Bytes(value, offset, count);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (canonicalCharsetName.equals(<span class="string">"US-ASCII"</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> Charsets.toAsciiBytes(value, offset, count);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (canonicalCharsetName.equals(<span class="string">"UTF-16BE"</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> Charsets.toBigEndianUtf16Bytes(value, offset, count);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        CharBuffer chars = CharBuffer.wrap(<span class="keyword">this</span>.value, <span class="keyword">this</span>.offset, <span class="keyword">this</span>.count);</span><br><span class="line">        ByteBuffer buffer = charset.encode(chars.asReadOnlyBuffer());</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[buffer.limit()];</span><br><span class="line">        buffer.get(bytes);</span><br><span class="line">        <span class="keyword">return</span> bytes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>上述代码其实就是根据给定的编码方式进行编码。如果调用的是不带参数的getBytes()方法，则使用默认的编码方式，如下代码所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* JDK source code */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Charset <span class="title">getDefaultCharset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String encoding = System.getProperty(<span class="string">"file.encoding"</span>, <span class="string">"UTF-8"</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Charset.forName(encoding);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnsupportedCharsetException e) &#123;</span><br><span class="line">        <span class="keyword">return</span> Charset.forName(<span class="string">"UTF-8"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>关于默认的编码方式，Java API是这样说的：</p><blockquote><p>The default charset is determined during virtual-machine startup and typically depends upon the locale and charset of the underlying operating system.</p></blockquote><p>同样，由上述代码可以看出，默认编码方式是由System类的”file.encoding”属性决定的，经过测试，在简体中文Windows操作系统下，默认编码方式为”GBK”，在Android平台上，默认编码方式为”UTF-8”。</p><h2 id="2-byte-转String"><a href="#2-byte-转String" class="headerlink" title="2. byte[]转String"></a>2. byte[]转String</h2><p>接下来分析一下常规的byte[]转为String的方法，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">byteArrayToStr</span><span class="params">(<span class="keyword">byte</span>[] byteArray)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (byteArray == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    String str = <span class="keyword">new</span> String(byteArray);</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>很简单，就是String的构造方法之一。那我们分析Java中String的源码，可以看出所有以byte[]为参数的构造方法最终都调用了如下代码所示的构造方法。需要注意的是Java中String类的数据是Unicode类型的，因此上述的getBytes()方法是把Unicode类型转化为指定编码方式的byte数组；而这里的Charset为读取该byte数组时所使用的编码方式。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* JDK source code */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">byte</span>[] data, <span class="keyword">int</span> offset, <span class="keyword">int</span> byteCount, Charset charset)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((offset | byteCount) &lt; <span class="number">0</span> || byteCount &gt; data.length - offset) &#123; </span><br><span class="line">        <span class="keyword">throw</span> failedBoundsCheck(data.length, offset, byteCount);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// We inline UTF-8, ISO-8859-1, and US-ASCII decoders for speed and because</span></span><br><span class="line">    <span class="comment">// 'count' and 'value' are final.</span></span><br><span class="line">    String canonicalCharsetName = charset.name();</span><br><span class="line">    <span class="keyword">if</span> (canonicalCharsetName.equals(<span class="string">"UTF-8"</span>)) &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] d = data;</span><br><span class="line">        <span class="keyword">char</span>[] v = <span class="keyword">new</span> <span class="keyword">char</span>[byteCount];</span><br><span class="line">        <span class="keyword">int</span> idx = offset;</span><br><span class="line">        <span class="keyword">int</span> last = offset + byteCount;</span><br><span class="line">        <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">        outer:</span><br><span class="line">        <span class="keyword">while</span> (idx &lt; last) &#123;</span><br><span class="line">            <span class="keyword">byte</span> b0 = d[idx++];</span><br><span class="line">            <span class="keyword">if</span> ((b0 &amp; <span class="number">0x80</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 0xxxxxxx</span></span><br><span class="line">                <span class="comment">// Range:  U-00000000 - U-0000007F</span></span><br><span class="line">                <span class="keyword">int</span> val = b0 &amp; <span class="number">0xff</span>;</span><br><span class="line">                v[s++] = (<span class="keyword">char</span>) val;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (((b0 &amp; <span class="number">0xe0</span>) == <span class="number">0xc0</span>) || ((b0 &amp; <span class="number">0xf0</span>) == <span class="number">0xe0</span>) ||</span><br><span class="line">                ((b0 &amp; <span class="number">0xf8</span>) == <span class="number">0xf0</span>) || ((b0 &amp; <span class="number">0xfc</span>) == <span class="number">0xf8</span>) || ((b0 &amp; <span class="number">0xfe</span>)</span><br><span class="line">                == <span class="number">0xfc</span>)) &#123;</span><br><span class="line">                <span class="keyword">int</span> utfCount = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> ((b0 &amp; <span class="number">0xf0</span>) == <span class="number">0xe0</span>) utfCount = <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((b0 &amp; <span class="number">0xf8</span>) == <span class="number">0xf0</span>) utfCount = <span class="number">3</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((b0 &amp; <span class="number">0xfc</span>) == <span class="number">0xf8</span>) utfCount = <span class="number">4</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((b0 &amp; <span class="number">0xfe</span>) == <span class="number">0xfc</span>) utfCount = <span class="number">5</span>;</span><br><span class="line">                <span class="comment">// 110xxxxx (10xxxxxx)+</span></span><br><span class="line">                <span class="comment">// Range:  U-00000080 - U-000007FF (count == 1)</span></span><br><span class="line">                <span class="comment">// Range:  U-00000800 - U-0000FFFF (count == 2)</span></span><br><span class="line">                <span class="comment">// Range:  U-00010000 - U-001FFFFF (count == 3)</span></span><br><span class="line">                <span class="comment">// Range:  U-00200000 - U-03FFFFFF (count == 4)</span></span><br><span class="line">                <span class="comment">// Range:  U-04000000 - U-7FFFFFFF (count == 5)</span></span><br><span class="line">                <span class="keyword">if</span> (idx + utfCount &gt; last) &#123;</span><br><span class="line">                    v[s++] = REPLACEMENT_CHAR;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// Extract usable bits from b0</span></span><br><span class="line">                <span class="keyword">int</span> val = b0 &amp; (<span class="number">0x1f</span> &gt;&gt; (utfCount - <span class="number">1</span>));</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; utfCount; ++i) &#123;</span><br><span class="line">                    <span class="keyword">byte</span> b = d[idx++];</span><br><span class="line">                    <span class="keyword">if</span> ((b &amp; <span class="number">0xc0</span>) != <span class="number">0x80</span>) &#123;</span><br><span class="line">                        v[s++] = REPLACEMENT_CHAR;</span><br><span class="line">                        idx--; <span class="comment">// Put the input char back</span></span><br><span class="line">                        <span class="keyword">continue</span> outer;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// Push new bits in from the right side</span></span><br><span class="line">                    val &lt;&lt;= <span class="number">6</span>;</span><br><span class="line">                    val |= b &amp; <span class="number">0x3f</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// Note: Java allows overlong char</span></span><br><span class="line">                <span class="comment">// specifications To disallow, check that val</span></span><br><span class="line">                <span class="comment">// is greater than or equal to the minimum</span></span><br><span class="line">                <span class="comment">// value for each count:</span></span><br><span class="line">                <span class="comment">//</span></span><br><span class="line">                <span class="comment">// count    min value</span></span><br><span class="line">                <span class="comment">// -----   ----------</span></span><br><span class="line">                <span class="comment">//   1           0x80</span></span><br><span class="line">                <span class="comment">//   2          0x800</span></span><br><span class="line">                <span class="comment">//   3        0x10000</span></span><br><span class="line">                <span class="comment">//   4       0x200000</span></span><br><span class="line">                <span class="comment">//   5      0x4000000</span></span><br><span class="line">                <span class="comment">// Allow surrogate values (0xD800 - 0xDFFF) to</span></span><br><span class="line">                <span class="comment">// be specified using 3-byte UTF values only</span></span><br><span class="line">                <span class="keyword">if</span> ((utfCount != <span class="number">2</span>) &amp;&amp; (val &gt;= <span class="number">0xD800</span>) &amp;&amp; (val &lt;= <span class="number">0xDFFF</span>)) &#123;</span><br><span class="line">                    v[s++] = REPLACEMENT_CHAR;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// Reject chars greater than the Unicode maximum of U+10FFFF.</span></span><br><span class="line">                <span class="keyword">if</span> (val &gt; <span class="number">0x10FFFF</span>) &#123;</span><br><span class="line">                    v[s++] = REPLACEMENT_CHAR;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// Encode chars from U+10000 up as surrogate pairs</span></span><br><span class="line">                <span class="keyword">if</span> (val &lt; <span class="number">0x10000</span>) &#123;</span><br><span class="line">                    v[s++] = (<span class="keyword">char</span>) val;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">int</span> x = val &amp; <span class="number">0xffff</span>;</span><br><span class="line">                    <span class="keyword">int</span> u = (val &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0x1f</span>;</span><br><span class="line">                    <span class="keyword">int</span> w = (u - <span class="number">1</span>) &amp; <span class="number">0xffff</span>;</span><br><span class="line">                    <span class="keyword">int</span> hi = <span class="number">0xd800</span> | (w &lt;&lt; <span class="number">6</span>) | (x &gt;&gt; <span class="number">10</span>);</span><br><span class="line">                    <span class="keyword">int</span> lo = <span class="number">0xdc00</span> | (x &amp; <span class="number">0x3ff</span>);</span><br><span class="line">                    v[s++] = (<span class="keyword">char</span>) hi;</span><br><span class="line">                    v[s++] = (<span class="keyword">char</span>) lo;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// Illegal values 0x8*, 0x9*, 0xa*, 0xb*, 0xfd-0xff</span></span><br><span class="line">                v[s++] = REPLACEMENT_CHAR;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s == byteCount) &#123;</span><br><span class="line">            <span class="comment">// We guessed right, so we can use our temporary array as-is.</span></span><br><span class="line">            <span class="keyword">this</span>.offset = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">this</span>.value = v;</span><br><span class="line">            <span class="keyword">this</span>.count = s;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Our temporary array was too big, so reallocate and copy.</span></span><br><span class="line">            <span class="keyword">this</span>.offset = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">this</span>.value = <span class="keyword">new</span> <span class="keyword">char</span>[s];</span><br><span class="line">            <span class="keyword">this</span>.count = s;</span><br><span class="line">            System.arraycopy(v, <span class="number">0</span>, value, <span class="number">0</span>, s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (canonicalCharsetName.equals(<span class="string">"ISO-8859-1"</span>)) &#123;</span><br><span class="line">        <span class="keyword">this</span>.offset = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.value = <span class="keyword">new</span> <span class="keyword">char</span>[byteCount];</span><br><span class="line">        <span class="keyword">this</span>.count = byteCount;</span><br><span class="line">        Charsets.isoLatin1BytesToChars(data, offset, byteCount, value);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (canonicalCharsetName.equals(<span class="string">"US-ASCII"</span>)) &#123;</span><br><span class="line">        <span class="keyword">this</span>.offset = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.value = <span class="keyword">new</span> <span class="keyword">char</span>[byteCount];</span><br><span class="line">        <span class="keyword">this</span>.count = byteCount;</span><br><span class="line">        Charsets.asciiBytesToChars(data, offset, byteCount, value);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        CharBuffer cb = charset.decode(ByteBuffer.wrap(data, offset, byteCount));</span><br><span class="line">        <span class="keyword">this</span>.offset = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.count = cb.length();</span><br><span class="line">        <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// We could use cb.array() directly, but that would mean we'd have to trust</span></span><br><span class="line">            <span class="comment">// the CharsetDecoder doesn't hang on to the CharBuffer and mutate it later,</span></span><br><span class="line">            <span class="comment">// which would break String's immutability guarantee. It would also tend to</span></span><br><span class="line">            <span class="comment">// mean that we'd be wasting memory because CharsetDecoder doesn't trim the</span></span><br><span class="line">            <span class="comment">// array. So we copy.</span></span><br><span class="line">            <span class="keyword">this</span>.value = <span class="keyword">new</span> <span class="keyword">char</span>[count];</span><br><span class="line">            System.arraycopy(cb.array(), <span class="number">0</span>, value, <span class="number">0</span>, count);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.value = EmptyArray.CHAR;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>具体的转换过程较为复杂，其实就是将byte数组的一个或多个元素按指定的Charset类型读取并转换为char类型（char本身就是以Unicode编码方式存储的），因为String类的核心是其内部维护的char数组。因此有兴趣的同学可以研究下各种编码方式的编码规则，然后才能看懂具体的转换过程。</p><h2 id="3-byte-转十六进制String"><a href="#3-byte-转十六进制String" class="headerlink" title="3. byte[]转十六进制String"></a>3. byte[]转十六进制String</h2><p>所谓十六进制String，就是字符串里面的字符都是十六进制形式，因为一个byte是八位，可以用两个十六进制位来表示，因此，byte数组中的每个元素可以转换为两个十六进制形式的char，所以最终的HexString的长度是byte数组长度的两倍。闲话少说上代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">byteArrayToHexStr</span><span class="params">(<span class="keyword">byte</span>[] byteArray)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (byteArray == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span>[] hexArray = <span class="string">"0123456789ABCDEF"</span>.toCharArray();</span><br><span class="line">    <span class="keyword">char</span>[] hexChars = <span class="keyword">new</span> <span class="keyword">char</span>[byteArray.length * <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; byteArray.length; j++) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = byteArray[j] &amp; <span class="number">0xFF</span>;</span><br><span class="line">        hexChars[j * <span class="number">2</span>] = hexArray[v &gt;&gt;&gt; <span class="number">4</span>];</span><br><span class="line">        hexChars[j * <span class="number">2</span> + <span class="number">1</span>] = hexArray[v &amp; <span class="number">0x0F</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(hexChars);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上述代码中，之所以要将byte数值和0xFF按位与，是因为我们为了方便后面的无符号移位操作（无符号右移运算符&gt;&gt;&gt;只对32位和64位的值有意义），要将byte数据转换为int类型，而如果直接转换就会出现问题。因为java里面二进制是以补码形式存在的，如果直接转换，位扩展会产生问题，如值为-1的byte存储的二进制形式为其补码11111111，而转换为int后为11111111111111111111111111111111，直接使用该值结果就不对了。而0xFF默认是int类型，即0x000000FF，一个byte值跟0xFF相与会先将那个byte值转化成int类型运算，这样，相与的结果中高的24个比特就总会被清0，后面的运算才会正确。</p><h2 id="4-十六进制String转byte"><a href="#4-十六进制String转byte" class="headerlink" title="4. 十六进制String转byte[]"></a>4. 十六进制String转byte[]</h2><p>没什么好说的了，就是byte[]转十六进制String的逆过程，放代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] hexStrToByteArray(String str)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (str == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (str.length() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">byte</span>[] byteArray = <span class="keyword">new</span> <span class="keyword">byte</span>[str.length() / <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; byteArray.length; i++)&#123;</span><br><span class="line">        String subStr = str.substring(<span class="number">2</span> * i, <span class="number">2</span> * i + <span class="number">2</span>);</span><br><span class="line">        byteArray[i] = ((<span class="keyword">byte</span>)Integer.parseInt(subStr, <span class="number">16</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> byteArray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>文中所有代码可以在<a href="https://github.com/GuoJinyu/AndroidUtils/tree/master" target="_blank" rel="noopener">个人github主页</a>查看和下载。</p><p>另，转载请注明出处！文中若有什么错误希望大家探讨指正！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java语言中字符串类型和字节数组类型相互之间的转换经常发生，网上的分析及代码也比较多，本文将分析总结常规的byte[]和String间的转换以及十六进制String和byte[]间相互转换的原理及实现。&lt;/p&gt;
&lt;h2 id=&quot;1-String转byte&quot;&gt;&lt;a href=&quot;#1-String转byte&quot; class=&quot;headerlink&quot; title=&quot;1. String转byte[]&quot;&gt;&lt;/a&gt;1. String转byte[]&lt;/h2&gt;&lt;p&gt;首先我们来分析一下常规的String转byte[]的方法，代码如下：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[] strToByteArray(String str) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (str == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[] byteArray = str.getBytes();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; byteArray;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;很简单，就是调用String类的getBytes()方法。看JDK源码可以发现该方法最终调用了String类如下的方法。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* JDK source code */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[] getBytes(Charset charset) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    String canonicalCharsetName = charset.name();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (canonicalCharsetName.equals(&lt;span class=&quot;string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Charsets.toUtf8Bytes(value, offset, count);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (canonicalCharsetName.equals(&lt;span class=&quot;string&quot;&gt;&quot;ISO-8859-1&quot;&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Charsets.toIsoLatin1Bytes(value, offset, count);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (canonicalCharsetName.equals(&lt;span class=&quot;string&quot;&gt;&quot;US-ASCII&quot;&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Charsets.toAsciiBytes(value, offset, count);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (canonicalCharsetName.equals(&lt;span class=&quot;string&quot;&gt;&quot;UTF-16BE&quot;&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Charsets.toBigEndianUtf16Bytes(value, offset, count);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CharBuffer chars = CharBuffer.wrap(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.value, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.offset, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.count);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ByteBuffer buffer = charset.encode(chars.asReadOnlyBuffer());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[] bytes = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[buffer.limit()];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        buffer.get(bytes);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; bytes;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://guojinyu.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://guojinyu.com/tags/Java/"/>
    
      <category term="Android" scheme="http://guojinyu.com/tags/Android/"/>
    
  </entry>
  
</feed>
